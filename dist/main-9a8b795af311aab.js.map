{"version":3,"file":"main-9a8b795af311aab.js","mappings":"2YA0CO,MAAMA,EAqBXC,YACUC,EACDC,GACP,aAFQD,OAAAA,EAER,KADOC,QAAAA,EACP,sGApBQ,IAoBR,gDAlBgB,GAkBhB,2BAjBkB,IAiBlB,4CAdiB,GAcjB,6CAZwD,IAYxD,uBAXsD,IAWtD,2BAV6C,IAU7C,0BALE,IAMFC,KAAKC,KAAOD,KAAKD,QAAQE,KACzBD,KAAKE,SAAL,UAAgBF,KAAKD,QAAQI,eAA7B,SAEAJ,EAAQK,MAAR,UAAgBL,EAAQK,aAAxB,QAAiCJ,KAAKF,OAAOO,eAC7CL,KAAKI,MAAQL,EAAQK,WACGE,IAApBP,EAAQQ,UACVP,KAAKO,QAAUR,EAAQQ,SAErBP,KAAKQ,2BACPV,EAAOW,WAAWC,QAAQC,GAAG,eAAgBC,GAC3CZ,KAAKa,QAAQD,KAEfd,EAAOW,WAAWC,QAAQC,GAAG,cAAeC,GAC1CZ,KAAKa,QAAQD,MAKnBE,OACE,GAAId,KAAKE,SAAU,CACjB,MAAMa,EAAaC,OAAOC,KAAKjB,KAAKkB,aACpC,IAAK,MAAMC,KAAKJ,EACdf,KAAKoB,WAAWD,GAElBnB,KAAKE,UAAW,GAIpBmB,QACOrB,KAAKE,UAAYF,KAAKsB,iBACzBtB,KAAKE,UAAW,EAChBF,KAAKuB,WAAWvB,KAAKsB,iBAIzBE,YAAYC,GAGV,OAFAzB,KAAK0B,cAAgB1B,KAAKsB,eAC1BtB,KAAKsB,eAAiBG,EACfzB,KAAK2B,YAAY3B,KAAK0B,eAAiB,GAAID,GAGpDG,oBACE,MAAMC,EAAM7B,KAAKF,OAAOW,WAAWoB,IACnC,GAAIA,GACE7B,KAAKD,QAAQ+B,aAAc,CAC7B,MAAMC,EAAkB/B,KAAKD,QAAQ+B,aAAa,CAAEE,OAAQ,KACtDC,EAAYjC,KAAKD,QAAQ+B,eAC/B,IAAK,MAAMI,KAAKlC,KAAKmC,eACU,IAAzBD,EAAEE,QAAQ,UACZP,EAAIQ,iBAAiBH,EAAG,aAAcH,GAEtCF,EAAIQ,iBAAiBH,EAAG,aAAcD,IAOhDK,kBAAkBC,GAChBvC,KAAKwC,kBAAkBC,KAAKF,GAG9BG,YAAYC,EAAeC,GACzB,MAAMf,EAAM7B,KAAKF,OAAOW,WAAWoB,IACnC,GAAIA,GAAmC,iBAArBe,EAAUC,OAAqB,CAE/C,IAAIC,EAAsB,GAC1B,GAFqBF,EAAUC,OAAOE,WAAW,QAE/B,CAChB,MACMC,EADSnB,EAAIoB,UAAUL,EAAUC,QAE9BK,MACHC,EAAgBnD,KAAKD,QAAQoD,eAAiB,KACpDL,EAAWE,EAAkBF,SAASH,QAAQxB,IAC5C,MAAMiC,EAAgB,GAAGC,OAAOV,EAAO,IACvC,OACExB,EAAEmC,aAA4D,IAA9CF,EAAIhB,QAAQjB,EAAEmC,WAAWH,WAGxC,CACL,MAAMI,EACJ,QAAUX,EAAU7C,QAAQE,MAAQ2C,EAAUY,IAC1CX,EAA6BD,EAAUC,OAC7CC,EAAWjB,EAAI4B,oBAAoBZ,EAAQ,CACzCF,SACAY,gBAGJ,GAAIT,GAAYA,EAASY,OAEvB,OADA1D,KAAK2D,eAAeb,GACbA,GAKbc,uBACE5D,KAAK6D,uBACL7D,KAAK8D,cAGPC,QACE/D,KAAKgE,eACLhE,KAAKiE,uBACDjE,KAAKsB,iBACPtB,KAAKkE,sBAAsBlE,KAAKsB,gBAChCtB,KAAKoB,WAAWpB,KAAKsB,iBAEvBtB,KAAKsB,oBAAiBhB,EAGxBqB,YAAYwC,EAAgBC,GA8B1B,OA7BgB,IAAIC,SAAQ,CAACC,EAASC,KACpCvE,KAAKgE,eACLhE,KAAKiE,uBACDG,GAAQD,IAAWC,GACrBpE,KAAKsC,kBAAkBgC,GACvBtE,KAAKuB,WAAW6C,GACbI,MAAMC,IACDA,IAAQzE,KAAKsB,gBACftB,KAAK0E,mBAAmBD,GAEpBN,IACFnE,KAAKkE,sBAAsBC,GAE3BnE,KAAK2E,iBAAiBF,EAAK,IAExBzE,KAAKQ,0BACRR,KAAK4E,qBAGPL,EAAQ,qBAGXM,OAAOC,IACNP,EAAOO,OAGXR,EAAQ,OAGGE,MAAK,IACXJ,IAIXW,UAAUtD,GACRzB,KAAKoB,WAAWK,GAGlBuD,aAAavD,GAEX,GADAA,OAAsBnB,IAAZmB,EAAwBA,EAAUzB,KAAKsB,eAE/C,OAAOtB,KAAKkB,YAAYO,GAI5BwD,iBAAiBxD,EAAiByD,GAChC,MAAMtC,EAAY5C,KAAKkB,YAAYO,GACnC,GAAImB,EACF,IAAK,MAAMzB,KAAKyB,EACdsC,EAAI/D,GAKVgE,mBAAmBC,EAAkBC,GACnC,MAAMC,EAAOF,EAAQ9B,WACrB,GAAIgC,GAAQtF,KAAKD,QAAQoD,cAAe,CACtC,MAAMA,EAAgBnD,KAAKD,QAAQoD,cAC7BoC,EAAMD,EAAKnC,GACXqC,EAAUxF,KAAKyF,gBAAgBJ,GACjCG,GAAWA,EAAQE,QACrBF,EAAQE,OAAO,CAAC,CAACvC,EAAe,KAAMwC,OAAOJ,OAKnDG,OAAOE,EAAcpC,GAAiD,UAApCqC,EAAoC,wDAGpE,GAFArC,EAAE,UAAGA,SAAH,QAASxD,KAAKsB,eAER,CACN,MAAM8B,EAAgBwC,EAAKE,MAAM,KAAKjE,KAAKV,GAAMwE,OAAOxE,KAClD4E,EAAS/F,KAAKkB,YAAYsC,GAC1BL,EAAgBnD,KAAKD,QAAQoD,cAC7B6C,EAAyB,GAC/B,IAAK,MAAM7E,KAAK4E,EAAQ,CACtB,MAAME,EAAW9E,GAAKA,EAAE+E,OAAS/E,EAAE+E,MAAM,GACrC9C,GAAO6C,GAAY9C,GACjBhC,GAAKA,EAAEuE,SACTvE,EAAEuE,OAAO,CAAC,CAACvC,EAAe,KAAMC,KAChC4C,EAAUvD,KAAKtB,IAIrB,GAAI0E,EACF,IAAK,MAAMjD,KAAaoD,EAAW,CACjC,MAAMlD,EAAW9C,KAAK0C,YACpB,CAAC,KAAMS,KAAkBC,GACzBR,GAEF,GAAIE,GAAYA,EAASY,OACvB,OAAOZ,IAOjBqD,UAAUxD,GACJA,GAAUA,EAAOe,OACnB1D,KAAKoG,QAAUzD,EAEf3C,KAAKoG,aAAU9F,EAEbN,KAAKD,QAAQoG,UACfnG,KAAKD,QAAQoG,UAAUnG,KAAKoG,SAAW,GAAIpG,KAAKsB,gBAEhDtB,KAAKqG,gBAITxC,uBACE,MAAM9C,EAAaC,OAAOC,KAAKjB,KAAKkB,aACpC,IAAK,MAAMsC,KAAMzC,EACXyC,IAAOxD,KAAKsB,gBACdtB,KAAKoB,WAAWoC,GAKdS,uBACNjE,KAAKwC,kBAAoB,GAGnBsB,cACF9D,KAAKsB,gBACPtB,KAAK2E,iBAAiB3E,KAAKsB,eAAgBtB,KAAKO,SAI5C+F,kBAAkB9C,GACxB,OAAO+C,OAAO/C,GAGRiC,gBAAgBjC,GACtB,OAAOxD,KAAKF,OAAO0G,SACjBxG,KAAKsG,kBAAkB9C,IAInBhD,yBACN,YAAmCF,IAA5BN,KAAKD,QAAQ0G,YAChBzG,KAAKD,QAAQ0G,WAIX9B,iBAAiBnB,EAAYkD,GACnC,MAAMD,EAAazG,KAAKQ,yBACxBR,KAAKiF,iBAAiBzB,GAAKmD,GACrBF,EACKzG,KAAKF,OAAO8G,gBAAgBD,EAAaD,GAElC,IAAVA,EACK1G,KAAKF,OAAOiF,UAAU4B,GAEtB3G,KAAKF,OAAO+G,UAAUF,KAM7B3C,eACFhE,KAAK8G,SACP9G,KAAK8G,OAAOC,SACZ/G,KAAK8G,YAASxG,GAIV0G,oBAAoBvF,GAC1B,MAAMwF,OACoB3G,IAAxBN,KAAKsB,gBACLtB,KAAKkB,YAAYlB,KAAKsB,gBACxB,QAAO2F,GACHA,EAAcC,MAAM/F,GAEhBA,EAAEqC,KAAO/B,GACTN,EAAEpB,QAAQE,OAASwB,GAClBN,EAAE+E,OAAS/E,EAAE+E,MAAMgB,MAAMC,GAAMA,IAAM1F,MAMxC2F,sBAAsBC,GAC5B,GAAIrH,KAAKkB,YAAYmG,GACnB,OAAOA,EAET,IAAK,MAAMC,KAAKtH,KAAKkB,YAAa,CAChC,MACMsE,EADgBxF,KAAKkB,YAAYoG,GACTC,MAAMpG,GAE/BA,EAAE0B,QAAU1B,EAAE0B,SAAWwE,GACzBlG,EAAEpB,SAAWoB,EAAEpB,QAAQyH,KAAOrG,EAAEpB,QAAQyH,MAAQH,IAGrD,GAAI7B,EACF,OAAOA,EAAQhC,IAKb3C,QAAQD,GACd,MAAMa,EAAUzB,KAAKoH,sBAAsBxG,EAAKyG,QAChD,GAAI5F,EAAS,CACX,MAAMgG,EAAYzH,KAAKmC,cAAcV,GAC/BiG,EAAiB1H,KAAKgH,oBAAoBvF,GAC1CkG,EAAiB3H,KAAK4H,gBAAgBnG,IACvCgG,GAAaE,GAAkBD,IAClC1H,KAAKmC,cAAcV,IAAW,EAC9BzB,KAAK4E,sBAKHiD,cACNC,EACArG,EACA4D,GAEA,MAAMxD,EAAM7B,KAAKF,OAAOW,WAAWoB,IAC7BkG,EAAQD,EAAEC,MAIhB,GAAIlG,EAAK,OACP,MAOMuD,EAPWvD,EAAImG,sBACnB,CACE,CAACD,EAAM5G,EAAI8G,IAAWF,EAAMZ,EAAIe,KAChC,CAACH,EAAM5G,EAAI8G,IAAWF,EAAMZ,EAAIe,MAElC,CAAEnC,OAAQ,CAACtE,KAEY,GACnB6D,EAAOF,EAAQ9B,WACrB,GAAItD,KAAKD,QAAQoI,mBAAoB,CACnC,MAAMC,EAAOpI,KAAKD,QAAQoI,mBAAmB7C,GACzC8C,IACFpI,KAAKgE,eACLhE,KAAK8G,QAAS,IAAIuB,EAAAA,OACfC,UAAUR,EAAES,QACZC,cAAcJ,GACdK,MAAM5G,KAGW,UAAG7B,KAAKD,QAAQ2I,0BAAhB,WAEtB1I,KAAKmF,mBAAmBC,EAASC,IAK/BnB,sBAAsBzC,GAC5B,MAAMI,EAAM7B,KAAKF,OAAOW,WAAWoB,IAG7B8G,EAAY3I,KAAK4I,iBAAiBnH,GACxC,GAAIkH,GAAa9G,EACf,IAAK,MAAMgH,KAAMF,EAAW,CAC1B,MAAMG,EAAWH,EAAUE,GACvBC,GACFjH,EAAIkH,IAAIF,EAAIC,GAIlB9I,KAAKgE,eAGCU,mBAAmBlB,GACzB,MAAM3B,EAAM7B,KAAKF,OAAOW,WAAWoB,IAC/BA,GACF7B,KAAKgJ,kBAAkBxF,GAAK/B,IAC1B,MAAMwH,EAAkBJ,GACtB7I,KAAK6H,cAAcgB,EAAIpH,EAAS+B,GAKlC3B,EAAIlB,GAAG,QAASc,EAASwH,GAEzBpH,EAAIlB,GAAG,aAAcc,GANO,IACzBI,EAAIqH,YAAYC,MAAMC,OAAS,YAOlCvH,EAAIlB,GAAG,aAAcc,GANO,IAAOI,EAAIqH,YAAYC,MAAMC,OAAS,KAQlEpJ,KAAK4I,iBAAiBnH,GAAWzB,KAAK4I,iBAAiBnH,IAAY,GAEnEzB,KAAK4I,iBAAiBnH,GAAS4H,MAAQJ,EACvCjJ,KAAK4I,iBAAiBnH,GAAS6H,WAAaL,EAC5CjJ,KAAK4I,iBAAiBnH,GAAS8H,WAAaN,KAK1CrB,gBAAgBnG,GACtB,OAAQzB,KAAKF,OAAO0J,YAAY/H,GAG1BgI,sBAAsBvD,GAC5B,IAAIlG,KAAKQ,yBAYP,OAAO,EAZ0B,CACjC,MAAMoC,EAAY5C,KAAKkB,YAAYgF,GACnC,GAAItD,EACF,OAAOA,EAAU8G,OAAOvI,GAEpBA,EAAEqC,KAAO0C,GACT/E,EAAEpB,QAAQE,OAASiG,GAClB/E,EAAE+E,OAAS/E,EAAE+E,MAAMgB,MAAMC,GAAMnH,KAAKmC,cAAcgF,QASrD6B,kBACNvH,EACAyD,GAEAlF,KAAKiF,iBACHxD,GACCmB,GACCA,EAAUsD,OACVtD,EAAUsD,MAAMyD,SAASxC,IACvBjC,EAAIiC,QAKJvC,oBAEJ5E,KAAKsB,gBACLtB,KAAKyJ,sBAAsBzJ,KAAKsB,kBAE3BtB,KAAKD,QAAQ6J,eAChB5J,KAAK4D,uBAEP5D,KAAK6J,0BAIDA,yBACN,IAAK,IAAIC,EAAM,EAAGA,EAAM9J,KAAKwC,kBAAkBkB,OAAQoG,KAErDvH,EADcvC,KAAKwC,kBAAkBsH,MAGvC9J,KAAKwC,kBAAoB,GAGJ,gBACrBgF,EACAhE,GAEA,MAAMuC,QAAe/F,KAAKD,QAAQgK,UAAUvC,EAAKhE,GACjD,GAAIuC,EAAQ,CACV/F,KAAKkB,YAAYsC,GAAM,GACvB,IAAK,MAAMtB,KAAK6D,EAAQ,CACtB,MAAMG,QAAchE,EACpBlC,KAAKkB,YAAYsC,GAAIf,KAAKyD,GAE5B,OAAOlG,KAAKkB,YAAYsC,IAIpBwG,aAAaxG,EAAYyG,GAC/BjK,KAAKgJ,kBAAkBxF,GAAKtB,IAC1BlC,KAAKmC,cAAcD,IAAK,KAE1BlC,KAAKmC,cAAcqB,IAAM,EACrByG,EACFjK,KAAKuB,WAAWiC,IAEhBxD,KAAKiF,iBAAiBzB,GAAKtB,IACzBlC,KAAKF,OAAOoK,YAAYhI,MAE1BlC,KAAKkB,YAAYsC,GAAM,IAInBpC,WAAWK,GACjBzB,KAAKgK,aAAavI,GAAS,GAGrBF,WAAWiC,GACjB,GAAIxD,KAAKE,SAAU,CACjB,MAAMiK,EAAS,KACbnK,KAAKiF,iBAAiBzB,GAAKtB,GAAMlC,KAAKF,OAAOsK,YAAYlI,GAAG,KACrDsB,GAIT,GADcxD,KAAKyF,gBAAgBjC,GAkBjC,OAAOa,QAAQC,QAAQ6F,KAjBb,CACV,MAAM3C,EAAMxH,KAAKD,QAAQsK,OACrBrK,KAAKD,QAAQsK,OAAO,CAClBC,QAAStK,KAAKD,QAAQuK,QACtBC,WAAY/G,IAEdxD,KAAKD,QAAQyK,aACbxK,KAAKD,QAAQuK,QAAU,iBAAmB9G,EAAK,mBAC/CxD,KAAKyK,aAAa,CAChBH,QAAStK,KAAKD,QAAQuK,QACtBC,WAAY/G,IAGlB,OAAOxD,KAAK0K,UAAUlD,EAAKhE,GAAIgB,MAAK,IAC3B2F,OAMb,OAAO,IAAI9F,SAAQ,CAACC,EAASC,KAC3BoG,YAAW,KACT3K,KAAK6J,yBACLvF,EAAQd,KACP,MAICiH,aAAaG,GACnB,OACEA,EAAIN,QAAJM,+DAGAA,EAAIL,WAIA5G,eAAeb,GACrB,MAAM+H,EAAS,IAAIC,EAAAA,aACbC,EAAkB,GAClBC,EAAgBC,IACpB,GAAsB,IAAlBA,EAAOvH,OACT,IAEEmH,EAAOK,OAAOD,GACd,MAAOnG,SAITmG,EAAOtB,SAASwB,IACdH,EAAaG,OAKnB,IAAK,MAAM/F,KAAWtC,EAAU,CAC9B,MAAMsI,EAA4BhG,EAAQgG,SAC1CJ,EAAaI,EAASC,aACtBN,EAAMtI,KAAK2C,EAAQgG,SAASE,MAE9B,GAAItL,KAAKF,OAAOW,WAAWoB,IAAK,CAC9B,MAAM0J,EAAYR,EAAMrB,OAAOvI,GAAY,UAANA,IACrCnB,KAAKF,OAAOW,WAAWoB,IAAI2J,UAAUX,EAAQ,CAC3CY,QAAS,GACTC,QAASH,EAAYvL,KAAK2L,gBAAkB3L,KAAK4L,qBAK/CvF,gBACN,GAAIrG,KAAKsB,eAAgB,CACvB,MAAMyE,EAAS/F,KAAKkB,YAAYlB,KAAKsB,gBAC/B6B,EAAgBnD,KAAKD,QAAQoD,cACnC,IAAK,MAAMhC,KAAK4E,EACV5C,GACEhC,GAAKA,EAAE0K,kBACT1K,EAAE0K,iBAAiB7L,KAAKoG,SAAW,M,wHCrmB/C,IAAI0F,EAAa,EAwBV,MAAMC,EAaXlM,YACUC,GAER,IADQC,EACR,uDADkC,GAClC,KAFQD,OAAAA,EAER,KADQC,QAAAA,EACR,iBAfkD,IAAIiM,EAAAA,cAetD,yEAZS,GAYT,kBAXS,GAWT,2BAVsD,IAUtD,6BATsE,IAStE,uBARkD,IAQlD,4BALE,IAOJC,eAA8C,IAAjCC,EAAiC,uDAArB,GAIvB,OAHclM,KAAKmM,kBAAkB5E,MAClCpG,GAAMA,EAAElB,OAASiM,IAKtBE,wBAAwB5I,GACtB,OAAOxD,KAAKqM,iBAAiBzJ,GAAcA,EAAUY,KAAOA,IAG9D8I,sBAAsB9I,GACpB,OAAOxD,KAAKqM,iBAAiBzJ,IAAD,cAAgB,UAACA,EAAUsD,aAAX,QAAC,EAAiBqG,SAAS/I,OAGzEgJ,gBACE,OAAOxM,KAAKmM,kBAGdM,aAAa1M,GACX,MAAM2M,EAAkB,IAAI9M,EAAgBI,KAAKF,OAAQC,GACzDC,KAAKmM,kBAAkB1J,KAAKiK,GAG9BC,aAAaC,EAAcC,GACzB,MAAMC,EAAW9M,KAAK+M,mBAAmBH,EAAMC,GAC3CC,GACF9M,KAAKgN,aAAaF,GAEhB9M,KAAKD,QAAQkN,eACfjN,KAAKD,QAAQkN,cAAcL,GAI/BpL,YACEC,GAEsC,IADtCyK,EACsC,uDAD1B,GAEZ,MAAMgB,EAAQlN,KAAKiM,aAAaC,GAChC,OAAIgB,EACEzL,EACKyL,EAAM1L,YAAYC,GAAS+C,MAAK,IAAM0I,KAE7CA,EAAMnJ,QACCM,QAAQC,aAAQhE,IAGpB+D,QAAQC,aAAQhE,GAGP,mBAAC6M,GACjB,MAAMC,QAA4BpN,KAAKqN,uBACrCF,GAEF,OAAOnN,KAAKsN,cAAcF,EAAqBD,GAGjDI,eACEvN,KAAKmM,kBAAkBxC,SAASxI,IAC1BA,EAAEO,gBACJP,EAAEG,eAAiBH,EAAEO,cACrBP,EAAE0C,uBACF1C,EAAEO,mBAAgBpB,MAGlBN,KAAKD,QAAQyN,SACfxN,KAAKD,QAAQyN,UAEfxN,KAAKyN,mBAAqB,GAC1BzN,KAAKU,QAAQgN,KAAK,kBAAkB,GAGtCJ,cAAcK,EAAwBR,GACpC,MAAMS,EAAoB5M,OAAOC,KAAKkM,GAEtCnN,KAAKmM,kBAAkBxC,SAASxI,IAC9BA,EAAEO,mBAAgBpB,EACbsN,EAAkBrB,SAASpL,EAAElB,OAC5BkB,EAAEG,gBACJH,EAAE4D,UAAU5D,EAAEG,mBAIpBqM,EAAOhE,SAASxI,GAAkBA,MAClCnB,KAAKyN,mBAAqB,GAC1BzN,KAAKU,QAAQgN,KAAK,iBAAkBP,GAGtCE,uBAAuBF,GACrB,MAAMU,EAA2B,GAwBjC,OAvBA7N,KAAKU,QAAQgN,KAAK,gBAAiBP,GACTnM,OAAOC,KAAKkM,GACpBxD,SAASmE,IACzB,MAAMpH,EAAQyG,EAAcW,GACtBC,EAAQ/N,KAAKyN,mBAAmBK,GACtC,GAAIC,GAASA,EAAMC,QACjBH,EAASpL,KAAKsL,EAAMC,aACf,CACL,MAAMA,EAAUhO,KAAKwB,YAAYkF,EAAOoH,GAAKtJ,MAAMrD,WAC1CnB,KAAKyN,mBAAmBK,GACxB,KACD3M,IACFA,EAAEyC,uBACF5D,KAAKU,QAAQgN,KAAK,uBAAwB,CACxCjM,QAASiF,EACTR,MAAO/E,SAKf0M,EAASpL,KAAKuL,OAGX3J,QAAQ4J,IAAIJ,GAGrBvL,kBAAkBC,GAChB,MAAMiB,EAAKsI,IACL+B,EAAW7N,KAAKmM,kBAAkBtK,KAAKV,GACpC,IAAIkD,SAAQ,CAACC,EAASC,KAC3BpD,EAAEmB,kBAAkBgC,QAUxB,OAPAtE,KAAKkO,oBAAoB1K,GAAMjB,EAC/B8B,QAAQ4J,IAAIJ,GAAUrJ,MAAK,KACzB,MAAM2J,EAASnO,KAAKkO,oBAAoB1K,GACpC2K,GACFA,OAGG3K,EAGT4K,WAAiD,IAAxCxD,EAAwC,uDAAV,GACrC5K,KAAKmM,kBAAkBxC,SAASxI,MACdyJ,EAAIyD,UAA2C,IAAjCzD,EAAIyD,QAAQjM,QAAQjB,EAAElB,QACrCkB,EAAEG,gBACfH,EAAE8D,iBAAiB9D,EAAEG,gBAAiB6F,IAChCA,EAAEiH,UAAYjH,EAAEmH,UAClBnH,EAAEiH,iBAOZG,aAAa3N,GACXZ,KAAKwO,cAAgBxO,KAAKyO,mBAAmB7N,GAC7CZ,KAAK0O,qBAAqB9N,IACrBZ,KAAK2O,aAAe3O,KAAK4O,WAC5B5O,KAAK2O,YAAc3O,KAAK4O,UAE1B5N,OAAO6N,OAAO7O,KAAKwO,eAAe7E,SAASxI,IACzCA,EAAE2N,WAAWC,MAAK,CAACC,EAAGC,IAAOD,EAAEE,KAAOD,EAAEC,MAAQ,EAAI,OAIxDR,qBAAqBS,GACnBA,EAAOxF,SAASxI,IACd,MAAMiO,EAAcpP,KAAKD,QAAQsP,eAAelO,GAC5CiO,GACFpP,KAAKyM,aAAa2C,MAKR,iBACdxC,EACA0C,EACAzC,GAEA,IAAI0C,EAA8BvP,KAAKwP,iBAAiB5C,EAAMC,GAK9D,GAJK0C,IACHA,EAAavP,KAAKyP,eAAe7C,EAAMC,IAGrC0C,EAAY,CACd,IAAInC,EACAD,EACJ,MAAMhG,EAAIyF,EACV5M,KAAK0P,SAAWvI,EAChB,MAAMwI,EAAO,KACX,MAAMC,EAAS,KACb5P,KAAK0P,cAAWpP,EAChBN,KAAK2O,YAAcxH,EACfiG,GAAuBD,GACzBnN,KAAKsN,cAAcF,EAAqBD,GAEtCnN,KAAKD,QAAQ8P,aACf7P,KAAKD,QAAQ8P,YAAY1I,IAGvBoG,EAAe,KACnBvN,KAAK0P,cAAWpP,EAChBN,KAAKuN,gBAEP+B,EACEnI,GACA,IAAMyI,MACN,IAAMrC,OAGOvM,OAAO8O,QAAQP,GAAY7F,OAAM,IAAoB,IAAlBwC,EAAW/K,GAAO,EACpE,MAAM4O,EAAY/P,KAAKiM,aAAaC,GACpC,GAAI6D,EAAW,CACb,MAAMC,EAAQ7O,GAAKA,EAAEqC,GACrB,OAAOuM,EAAUzO,iBAAmBiF,OAAOyJ,GAE7C,OAAO,OAKP7C,EAAgBnN,KAAKiQ,qBAAqBV,GAC1CnC,QAA4BpN,KAAKqN,uBAAuBF,IAHxDwC,SAOE3P,KAAK4O,UAAY5O,KAAKkQ,UACxBZ,EAASzC,EAAW7M,KAAK4O,SAAW5O,KAAKkQ,UAKvC7D,gBACNnH,GAEA,IAAK,IAAI4E,EAAM,EAAGA,EAAM9J,KAAKmM,kBAAkBzI,OAAQoG,IAAO,CAC5D,MAAMqG,EAAanQ,KAAKmM,kBAAkBrC,GACpClH,EAAYuN,EAAWnL,eAC7B,GAAIpC,EACF,IAAK,IAAIwN,EAAI,EAAGA,EAAIxN,EAAUc,OAAQ0M,IAAK,CACzC,MAAMlK,EAAQtD,EAAUwN,GACxB,GAAIlK,GAAShB,EAAIgB,GACf,MAAO,CAAE6J,UAAWI,EAAYvN,UAAWsD,KAO7CsJ,iBAAiB5C,EAAcC,GACrC,MAAMiC,EAA8B,GAapC,OAZA9O,KAAKwM,gBAAgB7C,SAASxI,IAC5B,MACM4E,EADc/F,KAAKwO,cAAcrN,EAAElB,MACd6O,WAAWnM,QAEnC0N,GAAMzD,GAAQyD,EAAEnB,MAAQtC,GAAQyD,EAAEC,KAErCxB,EAAW3N,EAAElB,QAAQ8F,EAAOrC,SACxBmJ,EACE9G,EAAO,GACPA,EAAOA,EAAOrC,OAAS,OAGxBoL,EAGD/B,mBAAmBH,EAAcC,GACvC,MAAM0D,EAAiBvQ,KAAKwP,iBAAiB5C,EAAMC,GACnD,OAAO7M,KAAKiQ,qBAAqBM,GAG3BN,qBAAqBO,GAC3B,MAAM1D,EAA0B,GAQhC,OAPA9L,OAAO8O,QAAQU,GAAY7G,SAAQ,IAAkB,IAAhBmE,EAAKpH,GAAW,EAEjDoG,EAASgB,KADPpH,GACcH,OAAOG,EAAMlD,OAK1BsJ,EAID2C,eAAe7C,EAAcC,GACnC,MAAM4D,EAAmBzQ,KAAKwP,iBAAiB5C,GACzC2D,EAAkC,GACxC,IAAK,MAAMrO,KAAKuO,EAAkB,CAChC,MAAMC,EAAYD,EAAiBvO,GACnC,IAAIyO,EACJ,MAAMxB,EAASnP,KAAKwO,cAActM,GAClC,GAAIwO,EAAW,CACb,MAAMpP,EAAiBtB,KAAKiM,aAAakD,EAAOlP,MAAMqB,eACtD,GAAIiF,OAAOmK,EAAUlN,MAAQlC,EAAgB,CAC3C,MAAMsP,EAAQzB,EAAOL,WAAW1M,QAAQsO,IACzB,IAAXE,IACFD,EAAYxB,EAAOL,WAAWjC,EAAW+D,EAAQ,EAAIA,EAAQ,UAQ/DD,EADE9D,EACUsC,EAAOL,WAChB+B,QACAC,UACAvJ,MAAM8I,GAAMA,EAAEC,IAAM1D,IAEXuC,EAAOL,WAAWvH,MAAM8I,GAAMA,EAAEnB,MAAQtC,IAGpD+D,IACFJ,EAAerO,GAAKyO,GAGxB,OAAOJ,EAGD9B,mBACNsC,GAEA,MAAMC,EAAyC,GAwB/C,OAvBAD,EAAYpH,SAASuD,IACnB,MAAM4B,EAA0B,GAChC5B,EAAM+D,MAAMtH,SAAQ,IAAkB,IAAjB,SAAEuH,GAAe,EACpC,MAAMjR,EAAOiR,EAASC,aAEhBC,EAASnR,EAAKoR,MAAM,kCAC1B,GAAID,EAAQ,CACV,MAAOlC,EAAMoB,GAAM,CAACc,EAAO,GAAIA,EAAO,IAAIvP,KAAKV,GAAMwE,OAAOxE,OAEzDnB,KAAKD,QAAQuR,UAAYpC,EAAOlP,KAAKD,QAAQuR,UAC7CtR,KAAKD,QAAQwR,QAAUjB,EAAKtQ,KAAKD,QAAQwR,UAI1CvR,KAAK4O,UACF5O,KAAK4O,SAAWM,EAAOA,EAAOlP,KAAK4O,WAAaM,EACnDlP,KAAKkQ,UAAYlQ,KAAKkQ,SAAWI,EAAKA,EAAKtQ,KAAKkQ,WAAaI,EAC7DxB,EAAWrM,KAAK,CAAExC,OAAMiP,OAAMoB,KAAI9M,GAAI0N,EAAS1N,UAIrDwN,EAAW9D,EAAMjN,MAAQ,CAAE6O,WAAYA,EAAY7O,KAAMiN,EAAMjN,SAE1D+Q,G,4JC3XJ,MAAMQ,EAoCX3R,YAAYE,GAAqB,iBAnCX,CACpBsH,OAAQ,OACR8B,MAAO,CACLsI,WAAY,CACVC,SAAU,EACVC,MAAO,GAETC,OACEC,SAASC,OAASD,SAASE,SAAW,kCA2BX,6FApBrBC,EAAAA,GAoBqB,iBAlBvB,IAAIhG,EAAAA,cAkBmB,iFAV7B,CAEFiG,OAAQC,EAAAA,IAQuB,0BAC/BlS,KAAKD,QAAU,IAAKC,KAAKD,WAAYA,GACrCC,KAAKmS,SAAW,IAAIC,EAAAA,EAAYpS,MAChC,MAAMqS,EAAUrS,KAAKgS,UAAUM,IAAI,QAC/BD,IACFrS,KAAKD,QAAQ4O,YAAc4D,SAASF,EAAS,KAG/C,MAAM,SAAEf,EAAF,YAAY3C,GAAgB3O,KAAKD,QAEnCuR,GAAY3C,GAAeA,EAAc2C,IAC3CtR,KAAKD,QAAQ4O,YAAc2C,GAE7BtR,KAAKwS,kBAAmBC,EAAAA,EAAAA,IACrB7F,GAAiB5M,KAAK0S,kBAAkB9F,IACzC,KAEF5M,KAAK2S,eAAenO,MAAK,KACvBxE,KAAK4S,eAIS,qBAChB,MAAM7S,EAAU,IAAKC,KAAKD,UACpB,OAAE8K,EAAF,OAAUxD,GAAWtH,EACrBD,EAAS,IAAI+S,EAAAA,GAAO,CACxBpS,WAAY,IAAIqS,EAAAA,EAChBC,YAAa,CAAC,IAAIC,EAAAA,IAClBnI,SACAxD,WA2BF,aAxBMvH,EAAOmT,SAEbjT,KAAKkT,QAAU,IAAInH,EAAQjM,EAAQ,CACjCwR,SAAUtR,KAAKD,QAAQuR,SACvBjC,eAAiBF,GAAwBnP,KAAKmT,gBAAgBhE,GAC9DU,YAAcjD,GAAiB5M,KAAKwS,iBAAiB5F,GACrDK,cAAgBL,GAAiB5M,KAAKwS,iBAAiB5F,GACvDY,QAAS,IAAMxN,KAAKwN,YAEtBxN,KAAKkT,QAAQxS,QAAQ0S,KAAK,kBAAkB,KAC1CpT,KAAKqT,8BAEHrT,KAAKD,QAAQ4O,cACf3O,KAAKkT,QAAQvE,YAAc3O,KAAKD,QAAQ4O,aAE1C7O,EAAOwT,aAAa,MAAO,CACzB9P,GAAI,cAONxD,KAAKF,OAASA,EACPA,EAGT0N,UACMxN,KAAKmS,UACPnS,KAAKwS,iBAAiBxS,KAAKkT,QAAQvE,aAIvC4E,YAAY3G,GACV,MAAM4G,EAAOxT,KAAKD,QAAQ0T,UAAUlM,MAAMpG,GAAMyL,EAAOzL,EAAEoQ,SACzD,OAAOiC,EAAOA,EAAKvT,KAAO,GAG5B2B,qBAIQ8Q,kBAAkB9F,GACxB,MAAM8G,EAAU1T,KAAKmS,SAASwB,kBAAkB/G,GAEhD5M,KAAKmS,SAASyB,YAAYF,GAE1B,MAAMG,EAAW7T,KAAK8T,oBAAoBlH,GAC1C5M,KAAK+T,yBAAyBnH,EAAMiH,GACpC7T,KAAKgU,2BAA2BpH,EAAMiH,GAEtC7T,KAAKgS,UAAUiC,IAAI,OAAQ1N,OAAOqG,IAG5ByG,2BACN,MAAM7P,EAAKwO,EAAAA,EAAAA,IAAc,MACzB,GAAIxO,EAAI,CACN,MAAM0J,EAAQlN,KAAKkT,QAAQjH,aAAa,QACpCiB,GACFA,EAAMxH,OAAOlC,IAKXoP,aACNsB,EAAAA,EAAAA,IAAWtT,IACTZ,KAAKkT,QAAQ3E,aAAa3N,GAE1BZ,KAAKmU,OAASnU,KAAKoU,gBAEnBpU,KAAKqU,gBACLrU,KAAKsU,yBACLtU,KAAKuU,SAAW,IAAIC,EAAAA,EAASxU,MAC7BA,KAAKuU,SAASE,iBAEdzU,KAAKF,OAAO4U,WAAU,KACpB1U,KAAKkT,QAAQvG,aAAa3M,KAAKkT,QAAQvE,gBAEzC3O,KAAKU,QAAQgN,KAAK,SAClB1N,KAAK2U,0BAEPC,EAAAA,EAAAA,KAAYpQ,MAAMqQ,IAChB7U,KAAKmS,SAAS2C,UAAUD,MAIpB1B,gBAAgBhE,GACtB,MAAMpP,EAA2C,CAC/CE,KAAMkP,EAAOlP,KACbqK,QAAStK,KAAKD,QAAQuK,QACtB/J,QAAS4O,EAAO5O,QAChBqJ,eAAe,EACfzG,cAAe,OAEX4R,EACJ/U,KAAKgV,aAAa7F,EAAOlP,MAC3B,GAAI8U,EAEF,OADoB,IAAIA,EAAY/U,KAAMD,GAKtCqU,gBAEN,MAOMD,EAAS,IAAIc,EAAAA,EAAc,CAC/B3J,KAAM,QACN4J,IAAKlV,KAAKkT,QAAQtE,SAClBuG,IAAKnV,KAAKkT,QAAQhD,SAClBkF,KAAM,EACNC,cAAerV,KAAKD,QAAQsV,eAAiB,EAC7C3O,MAAO1G,KAAKkT,QAAQvE,YACpB2G,eAAgBtV,KAAKD,QAAQuV,gBAAkB,IAC/CC,UAfgB,CAChB3I,EACA0C,EACAzC,KAEA7M,KAAKkT,QAAQsC,WAAW5I,EAAM0C,MAYhC6E,EAAOzT,QAAQC,GAAG,UAAWiM,IAEvBA,IAAS5M,KAAKkT,QAAQvE,aAAe/B,IAAS5M,KAAKkT,QAAQxD,WAC7D1P,KAAKkT,QAAQvE,YAAc/B,EAC3B5M,KAAKkT,QAAQvG,aAAaC,OAI9B,MAAM6I,EAAYzV,KAAKF,OAAOW,WAAWiV,eAKzC,OAJID,GACFA,EAAUE,YAAYxB,EAAOyB,MAAM5V,KAAKF,SAGnCqU,EAGDE,gBACN,MAAMwB,EAASC,SAASC,cAAc,OACtCF,EAAOG,UAAY,yCACnB,MAAMC,EAAaH,SAASC,cAAc,QAC1CE,EAAWC,UAAa,0BACLlW,KAAKkT,QAAQtE,YAAY5O,KAAKkT,QAAQhD,eACzD2F,EAAOF,YAAYM,GACnBJ,EAAOF,aAAYQ,EAAAA,EAAAA,IAAoBnW,OAEvC,MAAMoW,EAAepW,KAAKF,OAAOW,WAAWiV,eAK5C,OAJIU,GACFA,EAAaT,YAAYE,GAGpBA,EAGDvB,yBACN,MAAM+B,EAAQP,SAASC,cAAc,OACrCM,EAAML,UAAY,uBAElBK,EAAMV,aAAYW,EAAAA,EAAAA,IAAmBtW,OAErC,MAAMoW,EAAepW,KAAKF,OAAOW,WAAWiV,eAK5C,OAJIU,GACFA,EAAaT,YAAYU,GAGpBA,EAGDtC,yBAAyBnH,EAAciH,GAC7C,MAAM0C,EAASvW,KAAKwW,kBAAkB5J,GAClC2J,GAAUvW,KAAKuU,SAASkC,qBAC1BzW,KAAKuU,SAASkC,oBAAoBC,aAAaH,EAAQ1C,GAInD2C,kBAAkB5J,GASxB,OARgB5M,KAAKD,QAAQ4W,SAAW,IACjBpP,MAAMpG,IAC3B,IAAIyV,EAAShK,GAAQzL,EAAE0V,WAIvB,OAHID,GAAUzV,EAAE2V,WACdF,EAAShK,GAAQzL,EAAE2V,UAEdF,KAKH5C,2BAA2BpH,EAAciH,GAC/C,GAAI7T,KAAKuU,SAASwC,sBAAuB,CACvC,MAAMC,EAAWhX,KAAKiX,qBAAqBrK,GAC3C5M,KAAKuU,SAASwC,sBAAsBG,gBAAgBF,EAAUnD,IAI1DC,oBAAoBlH,GAC1B,GAAI5M,KAAKD,QAAQ8T,SACf,OAAO7T,KAAKD,QAAQ8T,SAAStM,MAAMpG,GAAMA,EAAEyL,OAASA,IAIhDqK,qBAAqBrK,GAO3B,OANAA,EAAOjH,OAAOiH,IACI5M,KAAKD,QAAQoX,WAAa,IACjBxU,QAAQxB,GAC1ByL,IAASzL,EAAEyL,OAMd+H,sBACF3U,KAAKuU,SAASwC,uBAChB/W,KAAKuU,SAASwC,sBAAsBrW,QAAQC,GAC1C,UACA,IAAkB,IAAjB,SAAEqW,GAAe,EAChBhX,KAAKmS,SAASiF,mBAAmBJ,MAIvChX,KAAKF,OAAOY,QAAQC,GAAG,YAAY,KACjCX,KAAKkT,QAAQ9E,iB,yJC1TZ,MAAMiJ,EAMXxX,YAAoBqT,GAAkB,KAAlBA,QAAAA,EAAkB,+FACpClT,KAAKsX,iBAAmB,IAAMtX,KAAKuX,kBACnCvX,KAAKwX,gBAAkB,IAAMxX,KAAKyX,iBAGpC7B,QACE,MAAMH,EAAYK,SAASC,cAAc,OAMzC,OALA/V,KAAK0X,WAAajC,EACdzV,KAAKkT,UACPlT,KAAKkT,QAAQxS,QAAQC,GAAG,gBAAiBX,KAAKsX,kBAC9CtX,KAAKkT,QAAQxS,QAAQC,GAAG,iBAAkBX,KAAKwX,kBAE1C/B,EAGTkC,WAKE,GAJI3X,KAAKkT,UACPlT,KAAKkT,QAAQxS,QAAQqI,IAAI,gBAAiB/I,KAAKsX,kBAC/CtX,KAAKkT,QAAQxS,QAAQqI,IAAI,iBAAkB/I,KAAKwX,kBAE9CxX,KAAK0X,WAAY,CACnB,MAAME,EAAS5X,KAAK0X,WAAWG,WAC3BD,GACFA,EAAOE,YAAY9X,KAAK0X,aAKtBH,kBACFvX,KAAK0X,aACP1X,KAAK0X,WAAWxB,UAAY,cAIxBuB,iBACFzX,KAAK0X,aACP1X,KAAK0X,WAAWxB,UAAY,O,wQC7C3B,MAAM6B,EAIXlY,YACSE,GAOP,KAPOA,QAAAA,EAOP,8CAVgB,GAWhBC,KAAKgY,aACqB1X,IAAxBN,KAAKD,QAAQkK,OAAuBjK,KAAKD,QAAQkK,OAASjK,KAAKgY,QACjEhY,KAAK0X,WAAa1X,KAAKiY,mBACvBjY,KAAKkY,mBAGPxC,eACE,OAAO1V,KAAK0X,WAGdvN,SAAqC,IAA9BF,EAA8B,wDAApBjK,KAAKgY,QACpBhY,KAAKgY,QAAU/N,EACfjK,KAAKkY,mBAGCD,mBACN,MAAME,EAAQrC,SAASC,cAAc,OACrCoC,EAAMnC,UAAY,iBACdhW,KAAKD,QAAQiW,WACfhW,KAAKD,QAAQiW,UAAUlQ,MAAM,KAAK6D,SAASxI,GAAMgX,EAAMC,UAAUC,IAAIlX,KAEvE,MAAMmX,EAAetY,KAAKD,QAAQuY,aAOlC,OANIA,GACFH,EAAMI,iBAAiB,SAAS,KAC9BvY,KAAKmK,SACLmO,EAAatY,KAAKgY,YAGfG,EAGDD,mBACN,MAAMM,EAAQxY,KAAKgY,QAAUhY,KAAKD,QAAQyY,MAAQxY,KAAKD,QAAQ0Y,SAC3DD,IACFxY,KAAK0X,WAAWc,MAAQA,EACpBxY,KAAKgY,QACPhY,KAAK0X,WAAWU,UAAUC,IAAI,UAE9BrY,KAAK0X,WAAWU,UAAUrR,OAAO,Y,yGC9C5B2R,EAAgB,qIAGiCC,2EACCC,qFACUC,qEAChBC,kwVCN5CC,EAAgB,qIAGiCJ,2EACCC,qFACUC,sEACfC,k2NCM1D,SAASE,EAAoBzE,GAC3B,MAAM0E,EAAY,YAalB,OAZyB,IAAIlB,EAAQ,CACnC/B,UAAW,qBACXwC,MAAO,kBACPC,SAAU,oBACVH,aAAerO,IACTA,EACFsK,EAAS2E,IAAIpZ,OAAO+G,UAAUoS,GAE9B1E,EAAS2E,IAAIpZ,OAAOiF,UAAUkU,MAOtC,SAASE,EAAWpZ,GAClB,MAAMqZ,EAAS,IAAIC,EAAAA,EAAOtZ,GAQ1B,OALEA,GAAWA,EAAQuZ,UAAYF,EAAOrZ,QAAQuZ,WAAavZ,EAAQuZ,UAEnEF,EAAOG,cAAcxZ,EAAQuZ,UAE/BF,EAAO/X,OACA+X,EAST,SAASI,EAAgBjF,GACvB,MAAMwC,EAAwBxC,EAASwC,sBACvC,GAAIA,EAAuB,CACzB,MAAM0C,EAAe,IAAI1B,EAAQ,CAC/B/B,UAAW,iBACXwC,MAAO,oDACPC,SAAU,sDACVH,aAAerO,IACTA,GACF8M,EAAsB2C,UAAW,EACjC3C,EAAsB1V,SAEtB0V,EAAsBjW,OACtBiW,EAAsB2C,UAAW,MAOvC,OAHA3C,EAAsBrW,QAAQC,GAAG,UAAWsJ,IAC1CwP,EAAatP,OAAOF,MAEfwP,GAIX,SAASE,EAAiBpF,GACxB,MAAMkC,EAAsBlC,EAASkC,oBACrC,GAAIA,EAAqB,CACvB,MAAMmD,EAAgB,IAAI7B,EAAQ,CAChC/B,UAAW,kBACXwC,MAAO,2BACPC,SAAU,6BACVH,aAAerO,IACTA,EACFwM,EAAoBpV,OAEpBoV,EAAoB3V,UAQ1B,OAHA2V,EAAoB/V,QAAQC,GAAG,UAAWsJ,IACxC2P,EAAczP,OAAOF,MAEhB2P,GAIX,SAASC,EAAiBtF,GACxB,MAAMuF,EAAcvF,EAASuF,YAC7B,GAAIA,EAAa,CACf,MAAMC,EAAgB,IAAIhC,EAAQ,CAChC/B,UAAW,kBACXwC,MAAO,iBACPC,SAAU,mBACVH,aAAerO,IACTA,EACF6P,EAAYzY,OAEZyY,EAAYhZ,UAQlB,OAHAgZ,EAAYpZ,QAAQC,GAAG,UAAWsJ,IAChC8P,EAAc5P,OAAOF,MAEhB8P,GAIJ,SAASC,EAAwBzF,GACtC,MAAM4D,EAAQrC,SAASC,cAAc,OACrCoC,EAAMnC,UAAY,yBAE0B,CAC1C6D,EAAiBtF,GACjBoF,EAAiBpF,GACjBiF,EAAgBjF,GAChByE,EAAoBzE,IAGd5K,SAASrC,GAAMA,GAAK6Q,EAAMxC,YAAYrO,EAAEoO,kBAEhD,MAAMuE,EAAQ,IAAIC,EAAAA,EAAM,CACtBC,SAAU,gBAGZ,OADAF,EAAMG,WAAWjC,GACV8B,EAGF,SAASI,IACd,MAAMlC,EAAQrC,SAASC,cAAc,OACrCoC,EAAMjC,UAAa,6SASnB,MAAM+D,EAAQ,IAAIC,EAAAA,EAAM,CACtBC,SAAU,gBAGZ,OADAF,EAAMG,WAAWjC,GACV8B,EAGT,SAASK,EAAcnC,GACrB,MAAQ,gHAEiBA,qBAIpB,SAASoC,EAAgBrB,GAAiC,IAAvBsB,EAAuB,uDAAZ,KACnD,MAAMC,EAAQvB,EAAIpZ,OAAO4a,gBAAgB,CACvCC,aAAa,EACbC,eAAe,IAEXC,EAAoC,CACxCC,GAAIpC,EACJqC,GAAIhC,GAEN,IAAIO,EAAWuB,EAAUL,GACzB,GAAIC,EAAM/W,OAAQ,CAChB,IAAIsX,EACW,OAAbR,EACI,2CACA,qBACNC,EAAM9Q,SAASxI,IACb6Z,GAAO7Z,KAETmY,GAAYgB,EAAcU,GAE5B,MAAM5S,EAAO0N,SAASC,cAAc,OACpC3N,EAAK8N,UAAYoD,EACjB,MAAM2B,EAAmB7S,EAAK8S,uBAC5B,6BACA,GACED,IACFA,EAAiBE,QAAU,KACzB9B,EAAAA,EAAAA,QACAkB,EAAgBrB,EAAK+B,EAAiBhb,QAG1CkZ,EAAW,CAAEG,SAAUlR,IAGlB,SAAS+N,EAAoB+C,GAClC,MAAMf,EAAQrC,SAASC,cAAc,KAQrC,OAPAoC,EAAMnC,UAAY,aAClBmC,EAAMiD,aAAa,OAAQ,KAC3BjD,EAAMjC,UAAa,IACnBiC,EAAMgD,QAAU,KACdZ,EAAgBrB,EAAK,OAGhBf,EAmEF,SAAS7B,EAAmB4C,GACjC,MAAMf,EAAQrC,SAASC,cAAc,OACrCoC,EAAMjC,UAAa,muBAoBnB,MAAMmF,EAAWlD,EAAM+C,uBACrB,uBACA,GAOF,OANIG,IACFA,EAASF,QAAWrT,IAClBA,EAAEwT,iBA3FD,SAA4BpC,GACjC,MAAMI,EAAWxD,SAASC,cAAc,OAGlCF,EAASC,SAASC,cAAc,OACtCF,EAAOG,UAAY,0BACnBH,EAAOK,UAAa,+BAGpBoD,EAAS3D,YAAYE,GAGrB,MAAM0F,EAAIrC,EAAI/E,OACqB,CACjC,CAAElU,KAAM,iBAAkBub,MAAO,wBAAyBlQ,KAAM,UAChE,CAAErL,KAAM,OAAQub,MAAO,qBAAsBlQ,KAAM,UACnD,CACErL,KAAM,gBACNub,MAAO,gCACPlQ,KAAM,WAID3B,SAASxI,IAChB,MAAMqC,EAAKrC,EAAElB,KAAO,IAAMwb,KAAKC,MAAsB,IAAhBD,KAAKE,UACpCC,EAAa9F,SAASC,cAAc,SAC1C6F,EAAW5F,UAAY,+BACvB4F,EAAW1F,UAAa,oDACtB/U,EAAEqa,sCAEchY,iBAAkBrC,EAAEmK,cAAciQ,EAAExb,QAAQoB,EAAElB,+BAGhE,MAAM4b,EAAQD,EAAWV,uBAAuB1X,GAAI,GACpDqY,EAAMtD,iBAAiB,SAAS,KAC9B,MAAM7R,EACO,WAAXvF,EAAEmK,KAAoBiH,SAASsJ,EAAMnV,MAAO,IAAMmV,EAAMnV,MAC1D1F,OAAO8a,eAAeP,EAAExb,QAASoB,EAAElB,KAAM,CAAEyG,QAAOqV,YAAY,OAGhEzC,EAAS3D,YAAYiG,MAIvB,MAAMI,EACJ9C,EAAI3E,SAASuF,aACbZ,EAAI3E,SAASuF,YAAYmC,mBAAkB,GACzCD,GACF1C,EAAS3D,YAAYqG,GAIvB,MAAME,EAAWpG,SAASC,cAAc,OACxCmG,EAASlG,UAAY,6BACrBkG,EAAShG,UAAa,qJAGXiG,EAAAA,eAEX7C,EAAS3D,YAAYuG,GAErB/C,EAAW,CAAEG,aA+BT8C,CAAmBlD,KAGhBf,EAaF,SAASkE,EAAkBC,GAQhC,OAPiBA,EAAQpD,IAAIpZ,OAAOyc,oBAAoB,CACtDpC,SAAU,4CACVqC,QAAS,IACPF,EAAQpD,IAAInZ,QAAQ8K,QACpByR,EAAQpD,IAAIpZ,OAAO0L,UAAU8Q,EAAQpD,IAAInZ,QAAQ8K,Y,iEC9TvD,MAAM4R,EAA8B,CAClCtC,SAAU,gBAGL,MAAMuC,UAA2BxC,EAAAA,EACtCra,YAAmBE,GACjB4c,MAAM,IAAKF,KAAY1c,IADuB,KAA7BA,QAAAA,EAEjBC,KAAK4c,oBAEL5c,KAAK6c,qBAGPZ,oBAAoD,IAAlCa,EAAkC,wDAClD,MAAMC,EAAUjH,SAASC,cAAc,OACvCgH,EAAQ/G,UAAY,qBACpB,MAAMgH,EAAShd,KAAKD,QAAQid,OAS5B,OARIA,GACFhc,OAAO6N,OAAOmO,GAAQrT,SAASxI,IAC7BA,EAAEwI,SAASwB,IACT4R,EAAQpH,YAAY3V,KAAKid,kBAAkB9R,EAAG2R,UAK7CC,EAGDH,oBACN,MAAMG,EAAU/c,KAAKic,oBACfiB,EAAcpH,SAASC,cAAc,OAgB3C,OAfAmH,EAAYlH,UAAY,6BACxBkH,EAAYhH,UAAa,8aAYzB6G,EAAQpH,YAAYuH,GACpBld,KAAKoa,WAAW2C,GACTA,EAGDE,kBAAkB9R,GAAyC,IAArB2R,EAAqB,wDACjE,MAAM3E,EAAQrC,SAASC,cAAc,OACrCoC,EAAMnC,UAAY,4BAElB,MAAOxS,EAAI2Z,EAAOC,GAAQjS,EACpBkS,EAAyB,iBAAVF,EAAqBA,EAAQA,EAAME,MAClD/R,EAAyB,iBAAV6R,GAAsBA,EAAM7R,MAAS,OAC1D,GAAIwR,EACF9c,KAAKsd,wBAAwBnF,EAAO3U,EAAI6Z,EAAOD,OAC1C,CACL,MAAMG,EAAS,IAAIC,IAAJ,CAAUH,GAEnBI,EAAc3H,SAASC,cAAc,OAC3C0H,EAAYzH,UAAY,6BAA+B1K,EACvDmS,EAAYtU,MAAMuU,gBAAkBnX,OAAOgX,EAAOI,KAAK,KAEvDF,EAAYtU,MAAMyU,OAAS,aAAeL,EAAOvb,OAAO,IAExDmW,EAAMxC,YAAY8H,GAElB,MAAMI,EAAY/H,SAASC,cAAc,OACzC8H,EAAU7H,UAAY,2BACtB6H,EAAU3H,UAAa,GAAEkH,IACzBjF,EAAMxC,YAAYkI,GAEpB,OAAO1F,EAGDmF,wBACNnF,EACA3U,EACA6Z,EACAD,GAEA,MAAMU,EAAahI,SAASC,cAAc,SAC1C+H,EAAW1C,aAAa,OAAQ,SAChC0C,EAAW9H,UAAY,+BACvB8H,EAAWpX,MAAQ2W,EACnBlF,EAAMxC,YAAYmI,GAClB,MAAMC,EAAWrX,GACP,MAAK0W,MAAS1W,KAGlBmX,EAAY/H,SAASC,cAAc,QACzC8H,EAAU7H,UAAY,2BACtB6H,EAAU3H,UAAY6H,EAAQV,GAC9B,MAAMW,EAAYhe,KAAKD,QAAQid,OAC/Bc,EAAWG,SAAW,KACpB,GAAID,EAAW,CACb,MAAMhB,EAA4B,GAClChc,OAAO6N,OAAOmP,GAAWrU,SAASxI,GAChCA,EAAEwI,SAASxC,GAAM6V,EAAOva,KAAK0E,OAE/B,MAAM+W,EAAelB,EAAOzV,MAAMpG,GAAMA,EAAE,KAAOqC,IAC7C0a,IACFA,EAAa,GAAKJ,EAAWpX,MAC7BmX,EAAU3H,UAAY6H,EAAQD,EAAWpX,OACzC1G,KAAKU,QAAQgN,KAAK,SAAU1N,KAAKD,QAAQid,WAK/C7E,EAAMxC,YAAYkI,GAGZhB,qBACN7c,KAAKU,QAAQC,GAAG,UAAU,KACxBX,KAAK4c,0B,kLChHJ,MAAM1C,EAYXra,cAAkD,IAA5BE,EAA4B,uDAAJ,GAAI,KAA5BA,QAAAA,EAA4B,iBAXxC,IAAIiM,EAAAA,cAWoC,iBATzC,GASyC,mBARvC,GAQuC,6HAChDhM,KAAKF,OAASE,KAAKD,QAAQD,OAC3BE,KAAK0X,WAAa1X,KAAKiY,mBAGzBvC,eACE,OAAO1V,KAAK0X,WAGd9B,MAAM/T,GAEJ,OADA7B,KAAKF,OAAS+B,EACP7B,KAAK0X,WAGdC,WACE,GAAI3X,KAAK0X,WAAY,CACnB,MAAMG,EAAa7X,KAAK0X,WAAWG,WAC/BA,GACFA,EAAWC,YAAY9X,KAAK0X,aAKlC0C,WAAW+D,GACTne,KAAKoe,aACDpe,KAAKqe,QACgB,iBAAZF,EACTne,KAAKqe,MAAMnI,UAAYiI,EACdA,aAAmBG,aAC5Bte,KAAKqe,MAAM1I,YAAYwI,IAK7Brd,OACEd,KAAKue,QAAS,EACVve,KAAK0X,YACP1X,KAAK0X,WAAWU,UAAUC,IAAI,cAEhCrY,KAAKU,QAAQgN,KAAK,UAAU,GAG9BrM,OACOrB,KAAK0Z,WACR1Z,KAAKue,QAAS,EACVve,KAAK0X,YACP1X,KAAK0X,WAAWU,UAAUrR,OAAO,cAEnC/G,KAAKU,QAAQgN,KAAK,UAAU,IAIhCyK,QACEnY,KAAK0Z,UAAW,EAGlB8E,UACExe,KAAK0Z,UAAW,EAGlB+E,oBAAoBtD,GAAsD,IAAjCiC,EAAiC,uDAA1B,YAC9C,MAAML,EAAUjH,SAASC,cAAc,UAIvC,OAHAgH,EAAQ/G,UAAY,mBACpB+G,EAAQ7G,UAAYkH,EACpBL,EAAQ5B,QAAUA,EACX4B,EAGT2B,gBAAgBlX,EAAa4V,GAC3B,OAAOpd,KAAKye,qBAAoB,IAAME,OAAOC,KAAKpX,EAAK,WAAW4V,GAGpEjE,WAAWpZ,GACJC,KAAK6e,UACR7e,KAAK6e,QAAU,IAAIxF,EAAAA,EAAOtZ,IAE5B,MAAMuZ,EAAWvZ,GAAWA,EAAQuZ,SAChCA,IACatZ,KAAK6e,QAAQ9e,QAAQuZ,WAAaA,GAE/CtZ,KAAK6e,QAAQtF,cAAcD,IAG/BtZ,KAAK6e,QAAQxd,OAGfyd,cACM9e,KAAK6e,SACP7e,KAAK6e,QAAQE,QAITX,aACFpe,KAAKqe,QACPre,KAAKqe,MAAMnI,UAAY,IAInB+B,mBACN,MAAM8E,EAAUjH,SAASC,cAAc,OAUvC,OATAgH,EAAQ/G,UAAY,wBAChBhW,KAAKD,QAAQoa,UACfna,KAAKD,QAAQoa,SAASrU,MAAM,KAAK6D,SAASxI,GAAM4b,EAAQ3E,UAAUC,IAAIlX,KAEpEnB,KAAKD,QAAQkW,WAGjB8G,EAAQpH,YAAY3V,KAAKgf,eAElBjC,EAGD1I,gBACN,MAAM0I,EAAUjH,SAASC,cAAc,OAOvC,OANAgH,EAAQ/G,UAAY,eAChBhW,KAAKD,QAAQkW,aACf8G,EAAQ7G,UAAYlW,KAAKD,QAAQkW,YAGnCjW,KAAKif,QAAUlC,EACRA,EAGDiC,cACN,MAAMjC,EAAUjH,SAASC,cAAc,OAIvC,OAHAgH,EAAQ/G,UAAY,aAEpBhW,KAAKqe,MAAQtB,EACNA,K,iLCnIX,MAAMN,EAAwB,CAC5BxG,WAAY,YACZkE,SAAU,gBAGL,MAAM+E,UAA2BhF,EAAAA,EAItCra,YAAYE,GACV4c,MAAM3b,OAAOme,OAAO,GAAI1C,EAAS1c,IADC,kDAIpCe,OAEE,GADA6b,MAAM7b,OACFd,KAAKF,OAAQ,CACf,MAAM2V,EAAYzV,KAAKF,OAAO4V,eAC1BD,GACFA,EAAU2C,UAAUrR,OAAO,iBAKjC1F,OAEE,GADAsb,MAAMtb,QACDrB,KAAKue,QAAUve,KAAKF,OAAQ,CAC/B,MAAM2V,EAAYzV,KAAKF,OAAO4V,eAC1BD,GACFA,EAAU2C,UAAUC,IAAI,iBAK9B3B,aAAaH,EAAgB1C,GAE3B,GADA7T,KAAK8e,cACDvI,EAAQ,CACV,MAAMxI,EAAQ/N,KAAKuW,OACb6I,EAAcpf,KAAK6T,UAAY7T,KAAK6T,SAASwL,KAC7CC,EAAUzL,GAAYA,EAASwL,KACjCtR,IAAUwI,GAAU6I,IAAgBE,IACtCtf,KAAKoa,WAAWpa,KAAKuf,kBAAkBhJ,EAAQ1C,IAC/C7T,KAAKuW,OAASA,EACdvW,KAAK6T,SAAWA,QAGlB7T,KAAKoa,WACH,wFAEFpa,KAAKuW,YAASjW,EAIVif,kBAAkBhJ,EAAgB1C,GACxC,MAAMkJ,EAAUjH,SAASC,cAAc,OACvCgH,EAAQ/G,UAAY,qBAGpB,MAAMwJ,EAAgB1J,SAASC,cAAc,OAE7C,IAAI0J,EAAY,GACZlJ,EAAOmJ,WACTD,EAAa,iFACuDlJ,EAAOmJ,+BAI7EF,EAActJ,UAAa,WACvBuJ,GAAwB,mDACclJ,EAAOtW,6DACLsW,EAAOM,gBACjDN,EAAOO,0EAEwCP,EAAOoJ,4BAEpD9L,EACK,mKAGD+L,EAAAA,EAAAA,GAAW/L,EAASwL,+CAIpB,WAGRtC,EAAQpH,YAAY6J,GAEpB,MAAMK,EACJtJ,EAAOuJ,aAAe9f,KAAK0e,gBAAgBnI,EAAOuJ,aAMpD,OAJID,GACF9C,EAAQpH,YAAYkK,GAGf9C,K,4LCtFX,MAAMN,EAAwB,CAC5BxG,WAAY,sCACZkE,SAAU,cAGL,MAAM4F,UAA8B7F,EAAAA,EAKzCra,YAAYE,GACV4c,MAAM,IAAKF,KAAY1c,IADW,+EAIpCe,OAEE,GADA6b,MAAM7b,OACFd,KAAKF,OAAQ,CACf,MAAM2V,EAAYzV,KAAKF,OAAO4V,eAC1BD,GACFA,EAAU2C,UAAUrR,OAAO,gBAKjC1F,OAEE,GADAsb,MAAMtb,QACDrB,KAAKue,QAAUve,KAAKF,OAAQ,CAC/B,MAAM2V,EAAYzV,KAAKF,OAAO4V,eAC1BD,GACFA,EAAU2C,UAAUC,IAAI,gBAK9BnB,gBAAgB8I,EAAuBnM,GACrC7T,KAAKggB,UAAYA,EACjBhgB,KAAK6T,SAAWA,EAChB7T,KAAKigB,eAAejgB,KAAKggB,UAAU,IAGrCC,eAAejJ,GACb,MAAMjJ,EAAQ/N,KAAKgX,SACbvB,EAAYzV,KAAK0V,eACnBD,IACFA,EAAU2C,UAAUrR,OAAO,QAC3B0O,EAAU2C,UAAUrR,OAAO,SAEzBiQ,EACEjJ,IAAUiJ,IAEZhX,KAAKgX,SAAWA,EAChBhX,KAAKoa,WAAWpa,KAAKuf,kBAAkBvI,MAIzChX,KAAKoa,WACH,wFAEFpa,KAAKgX,cAAW1W,GAElBN,KAAKU,QAAQgN,KAAK,SAAU,CAAEsJ,SAAUhX,KAAKgX,WAGvCuI,kBAAkBvI,GACxB,MAAM+F,EAAUjH,SAASC,cAAc,OACvCgH,EAAQ/G,UAAY,uBAEpB,MAAMkK,EAAYpK,SAASC,cAAc,OAKzC,GAJAmK,EAAUlK,UAAY,2BACtBkK,EAAUhK,UAAa,GAAEc,EAASpK,UAClCmQ,EAAQpH,YAAYuK,GAEhBlgB,KAAK6T,SAAU,CACjB,MAAMsM,EAAOngB,KAAK6T,SAASuM,KACvBD,GACFpD,EAAQpH,YAAY3V,KAAKqgB,iBAAiBF,IAE5C,MAAMG,EAAOtgB,KAAK6T,SAAS0M,MACrB9K,EAAYzV,KAAK0V,eACnB4K,GACFvD,EAAQpH,YAAY3V,KAAKqgB,iBAAiBC,GAAM,IAE9C7K,GACFA,EAAU2C,UAAUC,IAAIiI,EAAO,OAAS,QAIxCtgB,KAAKggB,WAAahgB,KAAKggB,UAAUtc,OAAS,GAC5CqZ,EAAQpH,YAAY3V,KAAKwgB,wBAG3B,MAAMC,EAAazgB,KAAK0gB,wBAAwB1J,GAC5CyJ,GACF1D,EAAQpH,YAAY8K,GAEtB,MAAME,EAAY3J,EAAS4J,iBAC3B,GAAID,EAAW,CACb,MAAMrH,EAAWxD,SAASC,cAAc,OACxCuD,EAAStD,UAAY,kCACrBsD,EAASpD,UAAa,GAAEyK,IAExB,MAAME,EAAa/K,SAASC,cAAc,OAE1C8K,EAAW7K,UAAY,cACvB6K,EAAWlL,YACT3V,KAAKye,qBAAoB,IAAMze,KAAKmZ,WAAW,CAAEG,gBAGnDyD,EAAQpH,YAAYkL,GAGtB,OAAO9D,EAGDyD,uBACN,MAAMM,EAAchL,SAASC,cAAc,OAC3C+K,EAAY9K,UAAY,6BACxB,MAAMgK,EAAYhgB,KAAKggB,UACjBhJ,EAAWhX,KAAKgX,SAEtB,GAAIA,GAAYgJ,EAAW,CACzB,MAAMe,EAAO/J,EAAS+J,KAChBC,GAAQC,EAAAA,EAAAA,GAAQjK,EAASgK,OAAShK,EAASgK,MAAQhB,EAAUtc,OACnE,GAAIsd,GAASD,GAAQC,EAAQ,GAAKA,GAASD,EAAM,CAC/C,MAAMnQ,EAAQoP,EAAU5d,QAAQ4U,GAC1BkK,EAAoB,IAAVtQ,EACVlN,EAASsc,EAAUtc,OACnByd,EAASvQ,IAAUlN,EAAS,EAE5B0d,EAAsB,CAC1BvU,EACAwU,KAEA,MAAMC,EAAOxL,SAASC,cAAc,KAepC,OAdAuL,EAAKlG,aAAa,OAAQ,KAI1BkG,EAAKtL,WACFnJ,EAAY,oBAAsB,sBAClCwU,EAAW,GAAK,WACfA,IACFC,EAAKnG,QAAWrT,IACdA,EAAEwT,iBACF,MAAMiG,EAAavB,EAAUnT,EAAW+D,EAAQ,EAAIA,EAAQ,GAC5D5Q,KAAKigB,eAAesB,KAGjBD,GAGTR,EAAYnL,YAAYyL,GAAoB,GAAOF,IAEnD,MAAMM,EAAc1L,SAASC,cAAc,OAC3CyL,EAAYxL,UAAY,uBAExBwL,EAAYtL,UAAa,GAAE6K,QAAWC,IACtCF,EAAYnL,YAAY6L,GACxBV,EAAYnL,YAAYyL,GAAoB,GAAQD,KAGxD,OAAOL,EAGDJ,wBAAwB1J,GAC9B,MAAM+F,EAAUjH,SAASC,cAAc,OACvC,GAAIiB,EAASyK,kBAEX,OADA1E,EAAQ7G,UAAa,gDAA+Cc,EAASyK,0BACtE1E,EAIHsD,iBAAiBW,EAAeU,GACtC,MAAM3E,EAAUjH,SAASC,cAAc,OAIvC,OAHAgH,EAAQ/G,UACN,+BAAiC0L,EAAS,OAAS,UACrD3E,EAAQ7G,WAAawL,EAAS,IAAM,MAAO9B,EAAAA,EAAAA,GAAWoB,GAC/CjE,K","sources":["webpack://russia-history/./src/TimeMap/TimeGroup.ts","webpack://russia-history/./src/TimeMap/TimeMap.ts","webpack://russia-history/./src/App.ts","webpack://russia-history/./src/TimeMap/TimeMapLoadingControl.ts","webpack://russia-history/./src/components/Links/Toggler.ts","webpack://russia-history/./src/components/Links/aboutRu.ts","webpack://russia-history/./src/components/Links/aboutEn.ts","webpack://russia-history/./src/components/Links/Links.ts","webpack://russia-history/./src/components/Panels/LegendPanelControl.ts","webpack://russia-history/./src/components/Panels/PanelControl.ts","webpack://russia-history/./src/components/Panels/PeriodPanelControl.ts","webpack://russia-history/./src/components/Panels/YearsStatPanelControl.ts"],"sourcesContent":["import { LngLatBounds, Popup } from 'maplibre-gl';\n\nimport type { Feature, FeatureCollection, Point, Polygon } from 'geojson';\nimport type {\n  Map,\n  GeoJSONSource,\n  MapMouseEvent,\n  MapLayerMouseEvent,\n} from 'maplibre-gl';\nimport type { PropertiesFilter } from '@nextgis/properties-filter';\nimport type {\n  VectorLayerAdapter,\n  MvtAdapterOptions,\n  WebMap,\n} from '@nextgis/webmap';\n\ntype UsedMapEvents = 'click' | 'mouseenter' | 'mouseleave';\ntype TLayer = string[];\nexport type TimeLayer = VectorLayerAdapter<Map, TLayer, MvtAdapterOptions>;\n\nexport interface TimeLayersGroupOptions {\n  name: string;\n  baseUrl: string;\n  filterIdField?: string;\n  manualOpacity?: boolean;\n  opacity?: number;\n  order?: number;\n  dataLoaded?: boolean;\n  visible?: boolean;\n  selectOnLayerClick?: boolean;\n  oldNgwMvtApi?: boolean;\n  addLayers: (\n    url: string,\n    id: string,\n  ) => Promise<TimeLayer>[] | Promise<Promise<TimeLayer>[]> | undefined;\n  setUrl?: (opt: { baseUrl: string; resourceId: string }) => string;\n  getFillColor?: (...args: any[]) => any;\n  createPopupContent?: (props: any) => HTMLElement | undefined;\n  setFilter?: (properties: PropertiesFilter, id?: number | string) => void;\n  removeFilter?: (id?: number | string) => void;\n}\n\nexport class TimeLayersGroup {\n  name: string;\n  currentLayerId?: string;\n  beforeLayerId?: string;\n  opacity = 0.8;\n  order?: number;\n  pointFitMaxZoom = 7;\n  polygonFitMaxZoom = 12;\n\n  private _filter?: PropertiesFilter;\n  private _visible = true;\n  private _popup?: Popup;\n  private _timeLayers: { [layerId: string]: TimeLayer[] } = {};\n  private _layersLoaded: { [layerId: string]: boolean } = {};\n  private _onDataLoadEvents: Array<() => void> = [];\n  private _onLayerClickMem: {\n    [layerId: string]: {\n      [ev in UsedMapEvents]?: (ev: MapMouseEvent & MapLayerMouseEvent) => void;\n    };\n  } = {};\n\n  constructor(\n    private webMap: WebMap<Map, TLayer>,\n    public options: TimeLayersGroupOptions,\n  ) {\n    this.name = this.options.name;\n    this._visible = this.options.visible ?? true;\n\n    options.order = options.order ?? this.webMap.reserveOrder();\n    this.order = options.order;\n    if (options.opacity !== undefined) {\n      this.opacity = options.opacity;\n    }\n    if (this._isWaitDataLoadedGroup()) {\n      webMap.mapAdapter.emitter.on('data-loaded', (data: any) =>\n        this._onData(data),\n      );\n      webMap.mapAdapter.emitter.on('data-error', (data: any) =>\n        this._onData(data),\n      );\n    }\n  }\n\n  hide(): void {\n    if (this._visible) {\n      const layersKeys = Object.keys(this._timeLayers);\n      for (const x of layersKeys) {\n        this._hideLayer(x);\n      }\n      this._visible = false;\n    }\n  }\n\n  show(): void {\n    if (!this._visible && this.currentLayerId) {\n      this._visible = true;\n      this._showLayer(this.currentLayerId);\n    }\n  }\n\n  updateLayer(layerId: string): Promise<string> {\n    this.beforeLayerId = this.currentLayerId;\n    this.currentLayerId = layerId;\n    return this.switchLayer(this.beforeLayerId || '', layerId);\n  }\n\n  updateLayersColor(): void {\n    const map = this.webMap.mapAdapter.map;\n    if (map) {\n      if (this.options.getFillColor) {\n        const fillColorDarken = this.options.getFillColor({ darken: 0.5 });\n        const fillColor = this.options.getFillColor();\n        for (const l in this._layersLoaded) {\n          if (l.indexOf('-bound') !== -1) {\n            map.setPaintProperty(l, 'line-color', fillColorDarken);\n          } else {\n            map.setPaintProperty(l, 'fill-color', fillColor);\n          }\n        }\n      }\n    }\n  }\n\n  pushDataLoadEvent(event: (...args: any[]) => void): void {\n    this._onDataLoadEvents.push(event);\n  }\n\n  fitToFilter(filter: any[], timeLayer: TimeLayer): Feature[] | undefined {\n    const map = this.webMap.mapAdapter.map;\n    if (map && typeof timeLayer.source === 'string') {\n      const isNgwGeoJson = timeLayer.source.startsWith('ngw:');\n      let features: Feature[] = [];\n      if (isNgwGeoJson) {\n        const source = map.getSource(timeLayer.source) as GeoJSONSource;\n        const featureCollection: FeatureCollection =\n          source._data as FeatureCollection;\n        const filterIdField = this.options.filterIdField || 'id';\n        features = featureCollection.features.filter((x) => {\n          const ids: number[] = [].concat(filter[2]);\n          return (\n            x.properties && ids.indexOf(x.properties[filterIdField]) !== -1\n          );\n        });\n      } else {\n        const sourceLayer: string | undefined =\n          'ngw:' + (timeLayer.options.name || timeLayer.id);\n        const source: string | undefined = timeLayer.source;\n        features = map.querySourceFeatures(source, {\n          filter,\n          sourceLayer,\n        });\n      }\n      if (features && features.length) {\n        this._fitToFeatures(features);\n        return features;\n      }\n    }\n  }\n\n  showOnlyCurrentLayer(): void {\n    this.hideNotCurrentLayers();\n    this.makeOpacity();\n  }\n\n  clean(): void {\n    this._removePopup();\n    this._cleanDataLoadEvents();\n    if (this.currentLayerId) {\n      this._removeLayerListeners(this.currentLayerId);\n      this._hideLayer(this.currentLayerId);\n    }\n    this.currentLayerId = undefined;\n  }\n\n  switchLayer(fromId: string, toId: string): Promise<string> {\n    const promise = new Promise((resolve, reject) => {\n      this._removePopup();\n      this._cleanDataLoadEvents();\n      if (toId && fromId !== toId) {\n        this.pushDataLoadEvent(resolve);\n        this._showLayer(toId)\n          .then((id_) => {\n            if (id_ === this.currentLayerId) {\n              this._addLayerListeners(id_);\n              // Do not hide unloaded layer if it first\n              if (fromId) {\n                this._removeLayerListeners(fromId);\n                // Not all tiles for this layer is loaded, hide until full loading\n                this._setLayerOpacity(id_, 0);\n              }\n              if (!this._isWaitDataLoadedGroup()) {\n                this._onSourceIsLoaded();\n              }\n            } else {\n              reject(`Not current id`);\n            }\n          })\n          .catch((er) => {\n            reject(er);\n          });\n      } else {\n        resolve('');\n      }\n    });\n    return promise.then(() => {\n      return toId;\n    });\n  }\n\n  hideLayer(layerId: string): void {\n    this._hideLayer(layerId);\n  }\n\n  getTimeLayer(layerId?: string): TimeLayer[] | undefined {\n    layerId = layerId !== undefined ? layerId : this.currentLayerId;\n    if (layerId) {\n      return this._timeLayers[layerId];\n    }\n  }\n\n  forEachTimeLayer(layerId: string, fun: (timeLayer: TimeLayer) => void): void {\n    const timeLayer = this._timeLayers[layerId];\n    if (timeLayer) {\n      for (const x of timeLayer) {\n        fun(x);\n      }\n    }\n  }\n\n  selectLayerFeature(feature: Feature, adapterId: string): void {\n    const prop = feature.properties;\n    if (prop && this.options.filterIdField) {\n      const filterIdField = this.options.filterIdField;\n      const fid = prop[filterIdField];\n      const adapter = this._getWebMapLayer(adapterId);\n      if (adapter && adapter.select) {\n        adapter.select([[filterIdField, 'eq', Number(fid)]]);\n      }\n    }\n  }\n\n  select(fids: string, id?: string, fit = false): Feature[] | undefined {\n    id = id ?? this.currentLayerId;\n\n    if (id) {\n      const ids: number[] = fids.split(',').map((x) => Number(x));\n      const layers = this._timeLayers[id];\n      const filterIdField = this.options.filterIdField;\n      const mapLayers: TimeLayer[] = [];\n      for (const x of layers) {\n        const mapLayer = x && x.layer && x.layer[0];\n        if (ids && mapLayer && filterIdField) {\n          if (x && x.select) {\n            x.select([[filterIdField, 'in', ids]]);\n            mapLayers.push(x);\n          }\n        }\n      }\n      if (fit) {\n        for (const timeLayer of mapLayers) {\n          const features = this.fitToFilter(\n            ['in', filterIdField, ...ids],\n            timeLayer,\n          );\n          if (features && features.length) {\n            return features;\n          }\n        }\n      }\n    }\n  }\n\n  setFilter(filter: PropertiesFilter): void {\n    if (filter && filter.length) {\n      this._filter = filter;\n    } else {\n      this._filter = undefined;\n    }\n    if (this.options.setFilter) {\n      this.options.setFilter(this._filter || [], this.currentLayerId);\n    } else {\n      this._updateFilter();\n    }\n  }\n\n  hideNotCurrentLayers(): void {\n    const layersKeys = Object.keys(this._timeLayers);\n    for (const id of layersKeys) {\n      if (id !== this.currentLayerId) {\n        this._hideLayer(id);\n      }\n    }\n  }\n\n  private _cleanDataLoadEvents() {\n    this._onDataLoadEvents = [];\n  }\n\n  private makeOpacity() {\n    if (this.currentLayerId) {\n      this._setLayerOpacity(this.currentLayerId, this.opacity);\n    }\n  }\n\n  private _getWebMapLayerId(id?: string) {\n    return String(id);\n  }\n\n  private _getWebMapLayer(id: string): VectorLayerAdapter {\n    return this.webMap.getLayer(\n      this._getWebMapLayerId(id),\n    ) as VectorLayerAdapter;\n  }\n\n  private _isWaitDataLoadedGroup() {\n    return this.options.dataLoaded !== undefined\n      ? this.options.dataLoaded\n      : true;\n  }\n\n  private _setLayerOpacity(id: string, value: number) {\n    const dataLoaded = this._isWaitDataLoadedGroup();\n    this.forEachTimeLayer(id, (dataLayerId) => {\n      if (dataLoaded) {\n        return this.webMap.setLayerOpacity(dataLayerId, value);\n      } else {\n        if (value === 0) {\n          return this.webMap.hideLayer(dataLayerId);\n        } else {\n          return this.webMap.showLayer(dataLayerId);\n        }\n      }\n    });\n  }\n\n  private _removePopup() {\n    if (this._popup) {\n      this._popup.remove();\n      this._popup = undefined;\n    }\n  }\n\n  private _isCurrentDataLayer(layerId: string): boolean {\n    const currentLayers =\n      this.currentLayerId !== undefined &&\n      this._timeLayers[this.currentLayerId];\n    return currentLayers\n      ? currentLayers.some((x) => {\n          return (\n            x.id === layerId ||\n            x.options.name === layerId ||\n            (x.layer && x.layer.some((y) => y === layerId))\n          );\n        })\n      : false;\n  }\n\n  private _getLayerIdFromSource(target: string) {\n    if (this._timeLayers[target]) {\n      return target;\n    }\n    for (const t in this._timeLayers) {\n      const timeLayerList = this._timeLayers[t];\n      const adapter = timeLayerList.find((x) => {\n        return (\n          (x.source && x.source === target) ||\n          (x.options && x.options.url && x.options.url === target)\n        );\n      });\n      if (adapter) {\n        return adapter.id;\n      }\n    }\n  }\n\n  private _onData(data: { target: string }) {\n    const layerId = this._getLayerIdFromSource(data.target);\n    if (layerId) {\n      const loadedYet = this._layersLoaded[layerId];\n      const isCurrentLayer = this._isCurrentDataLayer(layerId);\n      const isHistoryLayer = this._isHistoryLayer(layerId);\n      if (!loadedYet && isHistoryLayer && isCurrentLayer) {\n        this._layersLoaded[layerId] = true;\n        this._onSourceIsLoaded();\n      }\n    }\n  }\n\n  private _onLayerClick(\n    e: MapMouseEvent & MapLayerMouseEvent,\n    layerId: string,\n    adapterId: string,\n  ) {\n    const map = this.webMap.mapAdapter.map;\n    const point = e.point;\n    const width = 5;\n    const height = 5;\n    // Find all features within a bounding box around a point\n    if (map) {\n      const features = map.queryRenderedFeatures(\n        [\n          [point.x - width / 2, point.y - height / 2],\n          [point.x + width / 2, point.y + height / 2],\n        ],\n        { layers: [layerId] },\n      );\n      const feature = features[0];\n      const prop = feature.properties;\n      if (this.options.createPopupContent) {\n        const html = this.options.createPopupContent(prop);\n        if (html) {\n          this._removePopup();\n          this._popup = new Popup()\n            .setLngLat(e.lngLat)\n            .setDOMContent(html)\n            .addTo(map);\n        }\n      }\n      const selectOnLayerClick = this.options.selectOnLayerClick ?? true;\n      if (selectOnLayerClick) {\n        this.selectLayerFeature(feature, adapterId);\n      }\n    }\n  }\n\n  private _removeLayerListeners(layerId: string) {\n    const map = this.webMap.mapAdapter.map;\n    // map.off('click', layerId);\n\n    const memEvents = this._onLayerClickMem[layerId];\n    if (memEvents && map) {\n      for (const ev in memEvents) {\n        const memEvent = memEvents[ev as UsedMapEvents];\n        if (memEvent) {\n          map.off(ev, memEvent);\n        }\n      }\n    }\n    this._removePopup();\n  }\n\n  private _addLayerListeners(id: string) {\n    const map = this.webMap.mapAdapter.map;\n    if (map) {\n      this._forEachDataLayer(id, (layerId) => {\n        const layerClickBind = (ev: MapMouseEvent & MapLayerMouseEvent) =>\n          this._onLayerClick(ev, layerId, id);\n        const layerMouseEnterBind = () =>\n          (map.getCanvas().style.cursor = 'pointer');\n        const layerMouseLeaveBind = () => (map.getCanvas().style.cursor = '');\n\n        map.on('click', layerId, layerClickBind);\n        // Change the cursor to a pointer when the mouse is over the places layer.\n        map.on('mouseenter', layerId, layerMouseEnterBind);\n        // Change it back to a pointer when it leaves.\n        map.on('mouseleave', layerId, layerMouseLeaveBind);\n\n        this._onLayerClickMem[layerId] = this._onLayerClickMem[layerId] || {};\n\n        this._onLayerClickMem[layerId].click = layerClickBind;\n        this._onLayerClickMem[layerId].mouseenter = layerClickBind;\n        this._onLayerClickMem[layerId].mouseleave = layerClickBind;\n      });\n    }\n  }\n\n  private _isHistoryLayer(layerId: string) {\n    return !this.webMap.isBaseLayer(layerId);\n  }\n\n  private _isAllDataLayerLoaded(layer: string) {\n    if (this._isWaitDataLoadedGroup()) {\n      const timeLayer = this._timeLayers[layer];\n      if (timeLayer) {\n        return timeLayer.every((x) => {\n          return (\n            x.id === layer ||\n            x.options.name === layer ||\n            (x.layer && x.layer.some((y) => this._layersLoaded[y]))\n          );\n        });\n      }\n    } else {\n      return true;\n    }\n  }\n\n  private _forEachDataLayer(\n    layerId: string,\n    fun: (dataLayerId: string) => void,\n  ) {\n    this.forEachTimeLayer(\n      layerId,\n      (timeLayer) =>\n        timeLayer.layer &&\n        timeLayer.layer.forEach((y) => {\n          fun(y);\n        }),\n    );\n  }\n\n  private _onSourceIsLoaded() {\n    if (\n      this.currentLayerId &&\n      this._isAllDataLayerLoaded(this.currentLayerId)\n    ) {\n      if (!this.options.manualOpacity) {\n        this.showOnlyCurrentLayer();\n      }\n      this._executeDataLoadEvents();\n    }\n  }\n\n  private _executeDataLoadEvents() {\n    for (let fry = 0; fry < this._onDataLoadEvents.length; fry++) {\n      const event = this._onDataLoadEvents[fry];\n      event();\n    }\n    this._onDataLoadEvents = [];\n  }\n\n  private async _addLayer(\n    url: string,\n    id: string,\n  ): Promise<TimeLayer[] | undefined> {\n    const layers = await this.options.addLayers(url, id);\n    if (layers) {\n      this._timeLayers[id] = [];\n      for (const l of layers) {\n        const layer = await l;\n        this._timeLayers[id].push(layer);\n      }\n      return this._timeLayers[id];\n    }\n  }\n\n  private _toggleLayer(id: string, status: boolean) {\n    this._forEachDataLayer(id, (l) => {\n      this._layersLoaded[l] = false;\n    });\n    this._layersLoaded[id] = false;\n    if (status) {\n      this._showLayer(id);\n    } else {\n      this.forEachTimeLayer(id, (l) => {\n        this.webMap.removeLayer(l);\n      });\n      this._timeLayers[id] = [];\n    }\n  }\n\n  private _hideLayer(layerId: string) {\n    this._toggleLayer(layerId, false);\n  }\n\n  private _showLayer(id: string): Promise<string> {\n    if (this._visible) {\n      const toggle = () => {\n        this.forEachTimeLayer(id, (l) => this.webMap.toggleLayer(l, true));\n        return id;\n      };\n\n      const exist = this._getWebMapLayer(id);\n      if (!exist) {\n        const url = this.options.setUrl\n          ? this.options.setUrl({\n              baseUrl: this.options.baseUrl,\n              resourceId: id,\n            })\n          : this.options.oldNgwMvtApi\n          ? this.options.baseUrl + '/api/resource/' + id + '/{z}/{x}/{y}.mvt'\n          : this.newNgwMvtUrl({\n              baseUrl: this.options.baseUrl,\n              resourceId: id,\n            });\n\n        return this._addLayer(url, id).then(() => {\n          return toggle();\n        });\n      } else {\n        return Promise.resolve(toggle());\n      }\n    }\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        this._executeDataLoadEvents();\n        resolve(id);\n      }, 0);\n    });\n  }\n\n  private newNgwMvtUrl(opt: { baseUrl: string; resourceId: string }) {\n    return (\n      opt.baseUrl +\n      '/api/component/feature_layer/mvt?x={x}&y={y}&z={z}&' +\n      'resource=' +\n      opt.resourceId\n    );\n  }\n\n  private _fitToFeatures(features: Feature[]) {\n    const bounds = new LngLatBounds();\n    const types: string[] = [];\n    const extendCoords = (coords: any[]) => {\n      if (coords.length === 2) {\n        try {\n          // @ts-ignore\n          bounds.extend(coords);\n        } catch (er) {\n          // ignore\n        }\n      } else {\n        coords.forEach((c) => {\n          extendCoords(c);\n        });\n      }\n    };\n\n    for (const feature of features) {\n      const geometry: Polygon | Point = feature.geometry as Polygon | Point;\n      extendCoords(geometry.coordinates);\n      types.push(feature.geometry.type);\n    }\n    if (this.webMap.mapAdapter.map) {\n      const onlyPoint = types.every((x) => x === 'Point');\n      this.webMap.mapAdapter.map.fitBounds(bounds, {\n        padding: 20,\n        maxZoom: onlyPoint ? this.pointFitMaxZoom : this.polygonFitMaxZoom,\n      });\n    }\n  }\n\n  private _updateFilter() {\n    if (this.currentLayerId) {\n      const layers = this._timeLayers[this.currentLayerId];\n      const filterIdField = this.options.filterIdField;\n      for (const x of layers) {\n        if (filterIdField) {\n          if (x && x.propertiesFilter) {\n            x.propertiesFilter(this._filter || []);\n          }\n        }\n      }\n    }\n  }\n}\n","import StrictEventEmitter from 'strict-event-emitter-types';\nimport { EventEmitter } from 'events';\n\nimport { TimeLayersGroup } from './TimeGroup';\n\nimport type { Map } from 'maplibre-gl';\nimport type {\n  WebMap,\n  MvtAdapterOptions,\n  VectorLayerAdapter,\n} from '@nextgis/webmap';\nimport type { TimeLayersGroupOptions } from './TimeGroup';\nimport type {\n  LayerMetaRecord,\n  LayerIdRecord,\n  LayersGroup,\n  GroupsMeta,\n  LayerMeta,\n} from '../interfaces';\n\ntype TLayer = string[];\nexport type TimeLayer = VectorLayerAdapter<Map, TLayer, MvtAdapterOptions>;\n\nexport interface TimeGroupDefinition {\n  timeGroup: TimeLayersGroup;\n  timeLayer: TimeLayer;\n}\n\nlet EVENTS_IDS = 0;\n// const ORDER = 0;\n\nexport interface LoadingLayerFinishEvent {\n  layerId: string | false;\n  layer: TimeLayersGroup;\n}\n\ninterface Events {\n  'loading:start': LayerIdRecord;\n  'loading:finish': LayerIdRecord | false;\n  'loading-layer:finish': LoadingLayerFinishEvent;\n}\n\nexport interface TimeMapOptions {\n  timeLayersGroups?: TimeLayersGroupOptions[];\n  fromYear?: number;\n  toYear?: number;\n  getStatusLayer: (config: LayersGroup) => TimeLayersGroupOptions | undefined;\n  onLayerUpdate?: (year: number) => void;\n  onStepReady?: (year: number) => void;\n  onReset?: () => void;\n}\n\nexport class TimeMap {\n  emitter: StrictEventEmitter<EventEmitter, Events> = new EventEmitter();\n  currentYear!: number;\n  nextYear?: number;\n  _minYear = 0;\n  _maxYear = 0;\n  private readonly _timeLayersGroups: TimeLayersGroup[] = [];\n  private _onGroupsLoadEvents: Record<number, (...args: any[]) => void> = [];\n  private _groupsConfig: Record<string, GroupsMeta> = {};\n  private _loadLayerPromises: {\n    [layerName: string]: { id: string; promise: Promise<any> };\n  } = {};\n\n  constructor(\n    private webMap: WebMap<Map, TLayer>,\n    private options: TimeMapOptions = {} as TimeMapOptions,\n  ) {}\n\n  getTimeGroup(groupName = ''): TimeLayersGroup {\n    const group = this._timeLayersGroups.find(\n      (x) => x.name === groupName,\n    ) as TimeLayersGroup;\n    return group;\n  }\n\n  getTimeGroupByAdapterId(id: string): TimeGroupDefinition | undefined {\n    return this._getTimeGroupBy((timeLayer) => timeLayer.id === id);\n  }\n\n  getTimeGroupByLayerId(id: string): TimeGroupDefinition | undefined {\n    return this._getTimeGroupBy((timeLayer) => !!timeLayer.layer?.includes(id));\n  }\n\n  getTimeGroups(): TimeLayersGroup[] {\n    return this._timeLayersGroups;\n  }\n\n  addTimeGroup(options: TimeLayersGroupOptions): void {\n    const timeLayersGroup = new TimeLayersGroup(this.webMap, options);\n    this._timeLayersGroups.push(timeLayersGroup);\n  }\n\n  updateByYear(year: number, previous?: boolean): void {\n    const layersId = this._getLayerIdsByYear(year, previous);\n    if (layersId) {\n      this.updateLayers(layersId);\n    }\n    if (this.options.onLayerUpdate) {\n      this.options.onLayerUpdate(year);\n    }\n  }\n\n  updateLayer(\n    layerId: string | false,\n    groupName = '',\n  ): Promise<TimeLayersGroup | undefined> {\n    const group = this.getTimeGroup(groupName);\n    if (group) {\n      if (layerId) {\n        return group.updateLayer(layerId).then(() => group);\n      } else {\n        group.clean();\n        return Promise.resolve(undefined);\n      }\n    }\n    return Promise.resolve(undefined);\n  }\n\n  async updateLayers(layerIdRecord: LayerIdRecord): Promise<void> {\n    const updateLayersPromise = await this.getUpdateLayersPromise(\n      layerIdRecord,\n    );\n    return this.finishLoading(updateLayersPromise, layerIdRecord);\n  }\n\n  resetLoading(): void {\n    this._timeLayersGroups.forEach((x) => {\n      if (x.beforeLayerId) {\n        x.currentLayerId = x.beforeLayerId;\n        x.hideNotCurrentLayers();\n        x.beforeLayerId = undefined;\n      }\n    });\n    if (this.options.onReset) {\n      this.options.onReset();\n    }\n    this._loadLayerPromises = {};\n    this.emitter.emit('loading:finish', false);\n  }\n\n  finishLoading(groups: (() => void)[], layerIdRecord: LayerIdRecord): void {\n    const layerIdRecordList = Object.keys(layerIdRecord);\n\n    this._timeLayersGroups.forEach((x) => {\n      x.beforeLayerId = undefined;\n      if (!layerIdRecordList.includes(x.name)) {\n        if (x.currentLayerId) {\n          x.hideLayer(x.currentLayerId);\n        }\n      }\n    });\n    groups.forEach((x: () => void) => x());\n    this._loadLayerPromises = {};\n    this.emitter.emit('loading:finish', layerIdRecord);\n  }\n\n  getUpdateLayersPromise(layerIdRecord: LayerIdRecord): Promise<any[]> {\n    const promises: Promise<any>[] = [];\n    this.emitter.emit('loading:start', layerIdRecord);\n    const layerIdRecordList = Object.keys(layerIdRecord);\n    layerIdRecordList.forEach((key) => {\n      const value = layerIdRecord[key];\n      const exist = this._loadLayerPromises[key];\n      if (exist && exist.promise) {\n        promises.push(exist.promise);\n      } else {\n        const promise = this.updateLayer(value, key).then((x) => {\n          delete this._loadLayerPromises[key];\n          return () => {\n            if (x) {\n              x.showOnlyCurrentLayer();\n              this.emitter.emit('loading-layer:finish', {\n                layerId: value,\n                layer: x,\n              });\n            }\n          };\n        });\n        promises.push(promise);\n      }\n    });\n    return Promise.all(promises);\n  }\n\n  pushDataLoadEvent(event: (...args: any[]) => void): number {\n    const id = EVENTS_IDS++;\n    const promises = this._timeLayersGroups.map((x) => {\n      return new Promise((resolve, reject) => {\n        x.pushDataLoadEvent(resolve);\n      });\n    });\n    this._onGroupsLoadEvents[id] = event;\n    Promise.all(promises).then(() => {\n      const _event = this._onGroupsLoadEvents[id];\n      if (_event) {\n        _event();\n      }\n    });\n    return id;\n  }\n\n  unselect(opt: { exclude?: string[] } = {}): void {\n    this._timeLayersGroups.forEach((x) => {\n      const include = opt.exclude ? opt.exclude.indexOf(x.name) === -1 : true;\n      if (include && x.currentLayerId) {\n        x.forEachTimeLayer(x.currentLayerId, (y: VectorLayerAdapter) => {\n          if (y.unselect && y.selected) {\n            y.unselect();\n          }\n        });\n      }\n    });\n  }\n\n  buildTimeMap(data: LayersGroup[]): void {\n    this._groupsConfig = this._processGroupsMeta(data);\n    this._addTimeLayersGroups(data);\n    if (!this.currentYear && this._minYear) {\n      this.currentYear = this._minYear;\n    }\n    Object.values(this._groupsConfig).forEach((x) => {\n      x.layersMeta.sort((a, b) => (a.from < b.from ? -1 : 1));\n    });\n  }\n\n  _addTimeLayersGroups(config: LayersGroup[]): void {\n    config.forEach((x) => {\n      const statusLayer = this.options.getStatusLayer(x);\n      if (statusLayer) {\n        this.addTimeGroup(statusLayer);\n      }\n    });\n  }\n\n  async _stepReady(\n    year: number,\n    callback: (year: number, nextCb?: () => void, stopCb?: () => void) => void,\n    previous?: boolean,\n  ): Promise<void> {\n    let nextLayers: LayerMetaRecord = this._getLayersByYear(year, previous);\n    if (!nextLayers) {\n      nextLayers = this._getNextLayers(year, previous);\n    }\n\n    if (nextLayers) {\n      let updateLayersPromise: any[] | undefined;\n      let layerIdRecord: LayerIdRecord | undefined;\n      const y = year;\n      this.nextYear = y;\n      const next = () => {\n        const finish = () => {\n          this.nextYear = undefined;\n          this.currentYear = y;\n          if (updateLayersPromise && layerIdRecord) {\n            this.finishLoading(updateLayersPromise, layerIdRecord);\n          }\n          if (this.options.onStepReady) {\n            this.options.onStepReady(y);\n          }\n        };\n        const resetLoading = () => {\n          this.nextYear = undefined;\n          this.resetLoading();\n        };\n        callback(\n          y,\n          () => finish(),\n          () => resetLoading(),\n        );\n      };\n      const noChange = Object.entries(nextLayers).every(([groupName, x]) => {\n        const timeGroup = this.getTimeGroup(groupName);\n        if (timeGroup) {\n          const newId = x && x.id;\n          return timeGroup.currentLayerId === String(newId);\n        }\n        return true;\n      });\n      if (noChange) {\n        next();\n      } else {\n        layerIdRecord = this._layerMetaToIdRecord(nextLayers);\n        updateLayersPromise = await this.getUpdateLayersPromise(layerIdRecord);\n        next();\n      }\n    } else {\n      if (this._minYear && this._maxYear) {\n        callback(previous ? this._minYear : this._maxYear);\n      }\n    }\n  }\n\n  private _getTimeGroupBy(\n    fun: (timeLayer: TimeLayer) => boolean,\n  ): TimeGroupDefinition | undefined {\n    for (let fry = 0; fry < this._timeLayersGroups.length; fry++) {\n      const layerGroup = this._timeLayersGroups[fry];\n      const timeLayer = layerGroup.getTimeLayer();\n      if (timeLayer) {\n        for (let f = 0; f < timeLayer.length; f++) {\n          const layer = timeLayer[f];\n          if (layer && fun(layer)) {\n            return { timeGroup: layerGroup, timeLayer: layer };\n          }\n        }\n      }\n    }\n  }\n\n  private _getLayersByYear(year: number, previous?: boolean): LayerMetaRecord {\n    const layersMeta: LayerMetaRecord = {};\n    this.getTimeGroups().forEach((x) => {\n      const groupConfig = this._groupsConfig[x.name];\n      const layers = groupConfig.layersMeta.filter(\n        // if range from 900 to 901, event may be only in 900\n        (d) => year >= d.from && year <= d.to,\n      );\n      layersMeta[x.name] = layers.length\n        ? previous\n          ? layers[0]\n          : layers[layers.length - 1]\n        : false;\n    });\n    return layersMeta;\n  }\n\n  private _getLayerIdsByYear(year: number, previous?: boolean): LayerIdRecord {\n    const filteredLayers = this._getLayersByYear(year, previous);\n    return this._layerMetaToIdRecord(filteredLayers);\n  }\n\n  private _layerMetaToIdRecord(metaRecord: LayerMetaRecord): LayerIdRecord {\n    const layersId: LayerIdRecord = {};\n    Object.entries(metaRecord).forEach(([key, value]) => {\n      if (value) {\n        layersId[key] = String(value.id);\n      } else {\n        layersId[key] = false;\n      }\n    });\n    return layersId;\n  }\n\n  // get next or previous territory changed layer\n  private _getNextLayers(year: number, previous?: boolean): LayerMetaRecord {\n    const layersMetaInYear = this._getLayersByYear(year);\n    const filteredLayers: LayerMetaRecord = {};\n    for (const l in layersMetaInYear) {\n      const layerMeta = layersMetaInYear[l];\n      let nextLayer: LayerMeta | undefined;\n      const config = this._groupsConfig[l];\n      if (layerMeta) {\n        const currentLayerId = this.getTimeGroup(config.name).currentLayerId;\n        if (String(layerMeta.id) === currentLayerId) {\n          const index = config.layersMeta.indexOf(layerMeta);\n          if (index !== -1) {\n            nextLayer = config.layersMeta[previous ? index - 1 : index + 1];\n          }\n        } else {\n          layerMeta;\n        }\n      } else {\n        // if no layer for this year find nearest\n        if (previous) {\n          nextLayer = config.layersMeta\n            .slice()\n            .reverse()\n            .find((d) => d.to <= year);\n        } else {\n          nextLayer = config.layersMeta.find((d) => d.from >= year);\n        }\n      }\n      if (nextLayer) {\n        filteredLayers[l] = nextLayer;\n      }\n    }\n    return filteredLayers;\n  }\n\n  private _processGroupsMeta(\n    layersGroup: LayersGroup[],\n  ): Record<string, GroupsMeta> {\n    const groupsMeta: Record<string, GroupsMeta> = {};\n    layersGroup.forEach((group) => {\n      const layersMeta: LayerMeta[] = [];\n      group.items.forEach(({ resource }) => {\n        const name = resource.display_name;\n        // const _match = name.match('from_(\\\\d{3,4})_to_(\\\\d{3,4}).*$');\n        const _match = name.match('(\\\\d{3,4})_(to_)?(\\\\d{3,4}).*$');\n        if (_match) {\n          const [from, to] = [_match[1], _match[3]].map((x) => Number(x));\n          const allowedYear =\n            (this.options.fromYear && from < this.options.fromYear) ||\n            (this.options.toYear && to > this.options.toYear)\n              ? false\n              : true;\n          if (allowedYear) {\n            this._minYear =\n              (this._minYear > from ? from : this._minYear) || from;\n            this._maxYear = (this._maxYear < to ? to : this._maxYear) || to;\n            layersMeta.push({ name, from, to, id: resource.id });\n          }\n        }\n      });\n      groupsMeta[group.name] = { layersMeta: layersMeta, name: group.name };\n    });\n    return groupsMeta;\n  }\n}\n","import './App.css';\n\nimport { EventEmitter } from 'events';\nimport MapAdapter from '@nextgis/mapboxgl-map-adapter';\nimport { WebMap } from '@nextgis/webmap';\nimport { QmsKit } from '@nextgis/qms-kit';\nimport { debounce } from '@nextgis/utils';\n\nimport { SliderControl } from './components/SliderControl';\nimport { getLayers } from './services/GetLayersService';\nimport { getPoints } from './services/GetPointsService';\nimport {\n  getAboutProjectLink,\n  getAffiliatedLinks,\n} from './components/Links/Links';\nimport { Controls } from './controls/Controls';\nimport { TimeMap } from './TimeMap/TimeMap';\n\nimport { urlParams } from './services/UrlParams';\nimport { MarkerLayer } from './layers/MarkerLayer';\nimport { CitiesLayer } from './layers/CitiesLayer';\nimport { LinesLayer } from './layers/LinesLayer';\nimport { BoundaryLayer } from './layers/BoundaryLayer';\n\nimport type { Map } from 'maplibre-gl';\nimport type { Type } from '@nextgis/utils';\nimport type { TimeLayersGroupOptions } from './TimeMap/TimeGroup';\nimport type { AppOptions, AreaStat, LayersGroup } from './interfaces';\n\nexport class App {\n  options: AppOptions = {\n    target: '#app',\n    style: {\n      transition: {\n        duration: 0,\n        delay: 0,\n      },\n      glyphs:\n        location.origin + location.pathname + 'font/{fontstack}/{range}.pbf',\n    },\n  } as AppOptions;\n  controls!: Controls;\n  slider!: SliderControl;\n  webMap!: WebMap<Map, string[]>;\n\n  urlParams = urlParams;\n\n  emitter = new EventEmitter();\n\n  timeMap!: TimeMap;\n\n  updateDataByYear: (year: number) => void;\n\n  private statusLayers: {\n    [groupName: string]: Type<TimeLayersGroupOptions>;\n  } = {\n    // base: BoundaryLayer,\n    cities: CitiesLayer,\n    // lines: LinesLayer,\n    // status1: BoundaryLayer,\n    // status2: BoundaryLayer,\n  };\n\n  private _markers: MarkerLayer;\n\n  constructor(options: AppOptions) {\n    this.options = { ...this.options, ...options };\n    this._markers = new MarkerLayer(this);\n    const urlYear = this.urlParams.get('year');\n    if (urlYear) {\n      this.options.currentYear = parseInt(urlYear, 10);\n    }\n\n    const { fromYear, currentYear } = this.options;\n\n    if (fromYear && currentYear && currentYear < fromYear) {\n      this.options.currentYear = fromYear;\n    }\n    this.updateDataByYear = debounce(\n      (year: number) => this._updateDataByYear(year),\n      300,\n    );\n    this.createWebMap().then(() => {\n      this._buildApp();\n    });\n  }\n\n  async createWebMap(): Promise<WebMap> {\n    const options = { ...this.options };\n    const { bounds, target } = options;\n    const webMap = new WebMap({\n      mapAdapter: new MapAdapter(),\n      starterKits: [new QmsKit()],\n      bounds,\n      target,\n      // ...options,\n    });\n    await webMap.onLoad();\n\n    this.timeMap = new TimeMap(webMap, {\n      fromYear: this.options.fromYear,\n      getStatusLayer: (config: LayersGroup) => this._getStatusLayer(config),\n      onStepReady: (year: number) => this.updateDataByYear(year),\n      onLayerUpdate: (year: number) => this.updateDataByYear(year),\n      onReset: () => this.onReset(),\n    });\n    this.timeMap.emitter.once('loading:finish', () => {\n      this._setSelectedLayerFromUrl();\n    });\n    if (this.options.currentYear) {\n      this.timeMap.currentYear = this.options.currentYear;\n    }\n    webMap.addBaseLayer('OSM', {\n      id: 'baselayer',\n    });\n    // webMap.addBaseLayer('QMS', {\n    //   id: 'baselayer',\n    //   qmsId: 448,\n    //   visibility: true,\n    // });\n    this.webMap = webMap;\n    return webMap;\n  }\n\n  onReset(): void {\n    if (this._markers) {\n      this.updateDataByYear(this.timeMap.currentYear);\n    }\n  }\n\n  getTimeStop(year: number): string {\n    const stop = this.options.timeStops.find((x) => year < x.toYear);\n    return stop ? stop.name : '';\n  }\n\n  updateLayersColor(): void {\n    // ignore\n  }\n\n  private _updateDataByYear(year: number) {\n    const pointId = this._markers._getPointIdByYear(year);\n\n    this._markers.updatePoint(pointId);\n\n    const areaStat = this._findAreaStatByYear(year);\n    this._updatePeriodBlockByYear(year, areaStat);\n    this._updateYearStatBlockByYear(year, areaStat);\n\n    this.urlParams.set('year', String(year));\n  }\n\n  private _setSelectedLayerFromUrl() {\n    const id = urlParams.get('id');\n    if (id) {\n      const group = this.timeMap.getTimeGroup('base');\n      if (group) {\n        group.select(id);\n      }\n    }\n  }\n\n  private _buildApp() {\n    getLayers((data) => {\n      this.timeMap.buildTimeMap(data);\n\n      this.slider = this._createSlider();\n\n      this._createHeader();\n      this._createAffiliatedLogos();\n      this.controls = new Controls(this);\n      this.controls.updateControls();\n\n      this.webMap.onMapLoad(() => {\n        this.timeMap.updateByYear(this.timeMap.currentYear);\n      });\n      this.emitter.emit('build');\n      this._addEventsListeners();\n    });\n    getPoints().then((points) => {\n      this._markers.setPoints(points);\n    });\n  }\n\n  private _getStatusLayer(config: LayersGroup) {\n    const options: Partial<TimeLayersGroupOptions> = {\n      name: config.name,\n      baseUrl: this.options.baseUrl,\n      opacity: config.opacity,\n      manualOpacity: true,\n      filterIdField: 'fid',\n    };\n    const StatusLayer: Type<TimeLayersGroupOptions> | undefined =\n      this.statusLayers[config.name];\n    if (StatusLayer) {\n      const statusLayer = new StatusLayer(this, options);\n      return statusLayer;\n    }\n  }\n\n  private _createSlider() {\n    // used for animation to wait full layer loading\n    const stepReady = (\n      year: number,\n      callback: (value: number) => void,\n      previous: boolean,\n    ) => {\n      this.timeMap._stepReady(year, callback);\n    };\n    const slider = new SliderControl({\n      type: 'range',\n      min: this.timeMap._minYear,\n      max: this.timeMap._maxYear,\n      step: 1,\n      animationStep: this.options.animationStep || 1,\n      value: this.timeMap.currentYear,\n      animationDelay: this.options.animationDelay || 200,\n      stepReady,\n    });\n    slider.emitter.on('change', (year: number) => {\n      // may be updated in _stepReady method\n      if (year !== this.timeMap.currentYear && year !== this.timeMap.nextYear) {\n        this.timeMap.currentYear = year;\n        this.timeMap.updateByYear(year);\n      }\n    });\n\n    const container = this.webMap.mapAdapter.getContainer();\n    if (container) {\n      container.appendChild(slider.onAdd(this.webMap));\n    }\n\n    return slider;\n  }\n\n  private _createHeader() {\n    const header = document.createElement('div');\n    header.className = 'font-effect-shadow-multiple app-header';\n    const headerText = document.createElement('span');\n    headerText.innerHTML = `\n      Границы России ${this.timeMap._minYear}-${this.timeMap._maxYear} гг.`;\n    header.appendChild(headerText);\n    header.appendChild(getAboutProjectLink(this));\n\n    const mapContainer = this.webMap.mapAdapter.getContainer();\n    if (mapContainer) {\n      mapContainer.appendChild(header);\n    }\n\n    return header;\n  }\n\n  private _createAffiliatedLogos() {\n    const logos = document.createElement('div');\n    logos.className = 'app-affiliated-logos';\n\n    logos.appendChild(getAffiliatedLinks(this));\n\n    const mapContainer = this.webMap.mapAdapter.getContainer();\n    if (mapContainer) {\n      mapContainer.appendChild(logos);\n    }\n\n    return logos;\n  }\n\n  private _updatePeriodBlockByYear(year: number, areaStat?: AreaStat) {\n    const period = this._findPeriodByYear(year);\n    if (period && this.controls.periodsPanelControl) {\n      this.controls.periodsPanelControl.updatePeriod(period, areaStat);\n    }\n  }\n\n  private _findPeriodByYear(year: number) {\n    const periods = this.options.periods || [];\n    const period = periods.find((x) => {\n      let finded = year >= x.years_from;\n      if (finded && x.years_to) {\n        finded = year <= x.years_to;\n      }\n      return finded;\n    });\n    return period;\n  }\n\n  private _updateYearStatBlockByYear(year: number, areaStat?: AreaStat) {\n    if (this.controls.yearsStatPanelControl) {\n      const yearStat = this._findYearStatsByYear(year);\n      this.controls.yearsStatPanelControl.updateYearStats(yearStat, areaStat);\n    }\n  }\n\n  private _findAreaStatByYear(year: number): AreaStat | undefined {\n    if (this.options.areaStat) {\n      return this.options.areaStat.find((x) => x.year === year);\n    }\n  }\n\n  private _findYearStatsByYear(year: number) {\n    year = Number(year);\n    const yearsStat = this.options.yearsStat || [];\n    const yearStat = yearsStat.filter((x) => {\n      return year === x.year;\n    });\n\n    return yearStat;\n  }\n\n  private _addEventsListeners() {\n    if (this.controls.yearsStatPanelControl) {\n      this.controls.yearsStatPanelControl.emitter.on(\n        'update',\n        ({ yearStat }) => {\n          this._markers.updateActiveMarker(yearStat);\n        },\n      );\n    }\n    this.webMap.emitter.on('preclick', () => {\n      this.timeMap.unselect();\n    });\n  }\n}\n","import { MapControl } from '@nextgis/webmap';\nimport { TimeMap } from '../TimeMap/TimeMap';\n\nexport class TimeMapLoadingControl implements MapControl {\n  private _container?: HTMLElement;\n\n  private __onLoadingStart: () => void;\n  private __onLoadingStop: () => void;\n\n  constructor(private timeMap: TimeMap) {\n    this.__onLoadingStart = () => this._onLoadingStart();\n    this.__onLoadingStop = () => this._onLoadingStop();\n  }\n\n  onAdd(): HTMLElement {\n    const container = document.createElement('div');\n    this._container = container;\n    if (this.timeMap) {\n      this.timeMap.emitter.on('loading:start', this.__onLoadingStart);\n      this.timeMap.emitter.on('loading:finish', this.__onLoadingStop);\n    }\n    return container;\n  }\n\n  onRemove(): void {\n    if (this.timeMap) {\n      this.timeMap.emitter.off('loading:start', this.__onLoadingStart);\n      this.timeMap.emitter.off('loading:finish', this.__onLoadingStop);\n    }\n    if (this._container) {\n      const parent = this._container.parentNode;\n      if (parent) {\n        parent.removeChild(this._container);\n      }\n    }\n  }\n\n  private _onLoadingStart() {\n    if (this._container) {\n      this._container.innerHTML = 'Loading...';\n    }\n  }\n\n  private _onLoadingStop() {\n    if (this._container) {\n      this._container.innerHTML = '';\n    }\n  }\n}\n","export class Toggler {\n  private _container: HTMLElement;\n  private _status = true;\n\n  constructor(\n    public options: {\n      status?: boolean;\n      title?: string;\n      titleOff?: string;\n      className?: string;\n      toggleAction?: (status: boolean) => void;\n    },\n  ) {\n    this._status =\n      this.options.status !== undefined ? this.options.status : this._status;\n    this._container = this._createContainer();\n    this._updateContainer();\n  }\n\n  getContainer(): HTMLElement {\n    return this._container;\n  }\n\n  toggle(status = !this._status): void {\n    this._status = status;\n    this._updateContainer();\n  }\n\n  private _createContainer() {\n    const block = document.createElement('div');\n    block.className = 'panel__toggler';\n    if (this.options.className) {\n      this.options.className.split(' ').forEach((x) => block.classList.add(x));\n    }\n    const toggleAction = this.options.toggleAction;\n    if (toggleAction) {\n      block.addEventListener('click', () => {\n        this.toggle();\n        toggleAction(this._status);\n      });\n    }\n    return block;\n  }\n\n  private _updateContainer() {\n    const title = this._status ? this.options.title : this.options.titleOff;\n    if (title) {\n      this._container.title = title;\n      if (this._status) {\n        this._container.classList.add('active');\n      } else {\n        this._container.classList.remove('active');\n      }\n    }\n  }\n}\n","import LogoColorImg from './img/Runivers-Logo-color.svg';\nimport TransneftLogo1Img from './img/Transneft_logo1.png';\nimport GeolabImg from './img/geolab.png';\nimport NextgisImg from './img/nextgis.png';\n\nexport const aboutShortRu = `\n<div style=\"margin-top: 40px;\"></div>\n<div class=\"partner_logos\">\n<a href=\"https://www.runivers.ru\" target=\"_blank\"><img src=\"${LogoColorImg}\" /></a>\n<a href=\"https://www.transneft.ru\" target=\"_blank\"><img src=\"${TransneftLogo1Img}\" /></a>\n<a href=\"https://histgeo.ru/laboratory.html\" target=\"_blank\"><img src=\"${GeolabImg}\" /></a>\n<a href=\"https://nextgis.ru\" target=\"_blank\"><img src=\"${NextgisImg}\" /></a>\n</div>\n\n<div style=\"margin-top: 20px;\"></div>\n\n<div class=\"switch-about-language\">\n<a class=\"switch-about-language-btn\" name=\"en\" href=\"#\" style=\"font-size: 1.2rem; font-weight: bold;\">\nEnglish version\n</a>\n</div>\n\n<div style=\"margin-top: 20px;\"></div>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<h2>О проекте Границы России 850-2018 гг.</h2></P>\n\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<a href=\"https://www.runivers.ru\" target=\"_blank\">«Руниверс»</a> совместно с <a href=\"https://histgeo.ru/laboratory.html\" target=\"_blank\">Лабораторией исторической геоинформатики</a> Института всеобщей истории РАН и компанией <a href=\"http://nextgis.ru/\" target=\"_blank\">NextGIS</a> расширяет представленный ранее проект «Границы России 1462–2018 гг.» за счет увеличения хронологического охвата и добавления новых слоев. Теперь данный проект получает название «Границы Руси, России, СССР и РФ 850–2018 гг.».\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nЭтот картографический проект содержит геоданные о политических границах современной России и ее предшественников. Важнейшей возможностью, которую предоставляет данная карта, является выбор любого года в интервале карты. Год можно выбрать, кликнув мышкой в нужном месте ленты времени (в нижней части карты), либо запустив автоматическую прокрутку ленты времени с шагом в один год, либо, используя иконки + и – справа от ленты времени, сдвигаться на один год влево или вправо.\n</P>\n\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nПонятно, что начальная дата заявленного хронологического интервала совершенно условна. Она призвана показать расселение славянских племен в Восточной Европе накануне событий, известных как «призвание Рюрика». Более ранняя «нижняя» граница потребовала бы дополнительного отображения изменений в территориях, занятых отдельными восточнославянскими этническими группами, что с трудом выполнимо даже по результатам специальных исследований. Таким образом, новые слои политических границ позволяют охарактеризовать русскую историю до 1462 г.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nДля первого периода русской истории это сделано не только путем отображения внешних границ государственности, но и границ внутренних, принадлежащих, условно говоря, к «верхнему» административному уровню. При всей условности самого понятия «княжество» для первой половины восточноевропейской политической истории, о чем пишут современные историки (<a href=\"https://runivers.ru/include/doc/rusland/main_text_detail.php\">https://runivers.ru/include/doc/rusland/main_text_detail.php</a>), формат динамической карты вынуждает к тому, чтобы упростить историческую реальность и придать политическому ландшафту «осязаемые» контуры в виде набора полигонов.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nК «верхнему» административному уровню отнесены княжества, обладавшие самостоятельностью, но входившие в ту или иную политическую систему (например, Великого княжества Владимирского). Удельные княжества относятся к территориальным единицам уровнем ниже, поэтому на карте не отображались.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nПонимая, что, с одной стороны, формы политического статуса территорий многообразны и что, с другой стороны, это многообразие необходимо свести к ограниченному числу вариантов при отображении на карте, мы выделили всего восемь различных статусов территории России или ее предшественников:</br>\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n1) Основная территория государства.</br>\n2) Территория под протекторатом, в вассальной зависимости или в сфере влияния.</br>\n3) Арендованная территория.</br>\n4) Территория в совместном владении.</br>\n5) Спорная территория.</br>\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nКроме того, в год изменения конфигурации границы соответствующий участок показан отдельным полигоном: как Новая территория (6) или, напротив, как Утраченная территория (7). Эти полигоны также снабжены маркерами, цифра на которых обозначает соответствующую позицию в списке территориальных изменений информационной панели. В связи с тем, что некоторые изменения территории имели место в разные месяцы года, иногда полигоны со статусами 6 и 7 задерживаются на карте и в следующем после события году.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n8) Для периода до 1462 г. — самостоятельная территория (княжество и т.п.), определяющая внутренние границы картографированного региона (например, Тверское княжество до 1382 г. внутри Великого княжества Владимирского).\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nЭта дифференциация отражена во всплывающем окне, вызываемом по клику мыши на любом объекте внутри политических границ. Следует помнить, что атрибуты, относящиеся к территориям статуса 1–5, по клику мыши появятся лишь в том случае, если в месте клика на карте не помещена территория со статусом 8. Заливка соответствующих полигонов передана пятью цветами: одним цветом показана основная территория государства и вновь присоединенные земли (статусы 1 и 6), другим цветом – земли, находящиеся в некоторой зависимости от него (статус 2), третьим – земли арендованные, спорные и находящиеся под совместным управлением с другими государствами (статусы 3–5). Утраченные территории обозначены четвертым цветом (статус 7), однако в силу ряда технических особенностей текущего алгоритма построения геометрий не все утраченные территории показаны на карте отдельным полигоном.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nВ центре каждого полигона, демонстрирующего приращение или потерю территории, помещен маркер, помогающий пользователю быстро найти соответствующее место на мелкомасштабной карте. По клику на маркер выдается информация о событии, приведшем к появлению данного территориального образования.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nПятый цвет — для территорий с внутренними границами. По клику на любой полигон можно получить данные о хронологическом диапазоне, в котором существовало данное территориальное образование, и его площади (в квадратных километрах).\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nМногие полигоны, относимые к статусу 2, отмечены во всплывающем окне как зона древнерусской колонизации. Эта формулировка подразумевает в основном контактные зоны между основным населением государства и населением, лишь вовлекаемым в отношения с ним. Постепенное продвижение древнерусского земледельческого населения на восток и юго-восток в конечном итоге приводило к включению освоенной территории в основной контур государства, но процесс этот не может быть однозначно зафиксирован в пространстве и времени.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nБолее подробное описание территорий, отображенных на карте, доступно по ссылке из окна, всплывающего по клику мышки на соответствующей территории, которая ведет на сайт «Руниверс».\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nКроме того, в новой версии проект дополнен рядом слоев. Слой городов показывает на карте расположение столиц и административных центров «верхнего уровня», расположенных по статусу на одну ступеньку ниже столиц. В наши задачи не входило отображение всех городов или хотя бы городов нижних административных уровней, а даты их появления и исчезновения на карте не совпадают с датами первого и последнего упоминаний. Хронологические рамки характеризуют лишь временной интервал, когда город служил административным центром «верхнего уровня». Поэтому большинство уездов XVII в. с карты исчезают в начале XVIII в., когда на смену уездам как основной единице административного деления приходят губернии. Появление на карте новых городов синхронно появлению соответствующего административного округа на «верхнем уровне» административной сетки.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nЕще один слой, добавленный на карту, в полном смысле экспериментальный. Он призван охарактеризовать конкретный участок границы по степени условности. Для этого сейчас используется три типа линий. Наиболее определенно участки границ локализуются по историческим документам, картографическим материалам XVIII—XXI в. или на основе специальных историко-географических исследований, которые на эти документы и материалы опираются (первый тип линий). Множество границ существовало на местности хотя бы на уровне общих представлений современников, однако по состоянию исторических свидетельств пока что не могут быть картографированы достаточно определенно (второй тип линий). Наконец, значительная часть границ (для домонгольской Руси практически все) во всех отношениях абстрактна — границы не только не могут быть сколь-нибудь определенно обозначены в настоящее время, но и не существовали ни в исторической реальности, ни в представлениях современников — насколько это можно предполагать исходя из наших актуальных представлений о прошлом.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nВ правом верхнем углу карты доступны три иконки-кнопки. Первая позволяет отключить современную картографическую подложку, две другие позволяют управлять отображением двух информационных блоков карты. В первом из них отображается имя правителя на избранный пользователем год, его титул или должность, годы нахождения у власти с отсылкой на отдельную страницу сайта с более подробными сведениями. В нижнем блоке указаны имевшие место в данном году территориальные изменения и приведена приблизительная площадь участков, которые добавились к территории государства и, наоборот, оказались утрачены.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nПри создании веб-ГИС «Границы Руси, России, СССР и РФ 850–2018 гг.» реализована концепция динамической карты. С точки зрения технической реализации проекта эта концепция является оригинальным решением, разработанным <a href=\"https://histgeo.ru/laboratory.html\" target=\"_blank\">Лабораторией исторической геоинформатики</a> Института всеобщей истории РАН совместно с <a href=\"http://nextgis.ru/\" target=\"_blank\">NextGIS</a>. Описание <a href=\"http://nextgis.ru/blog/runivers/\" target=\"_blank\">технической реализации</a> проекта.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nПрикладное значение данного проекта для использования в научных целях является отличительной его чертой. Подобные динамические карты, демонстрирующие изменения границ в прошлом, имеют в основном «образовательный» уклон и не предназначены для специалистов-историков. Но публикуемая динамическая карта открыта для постоянной корректировки и призвана в дальнейшем стать некой картографической подосновой для историка, применяющего ГИС-технологии для решения конкретных исследовательских задач.\n</P>\n<P ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\nО допущениях, особенностях методики и ограничениях применявшейся методики, технических особенностях проекта и перспективах его развития см. <a href=\"https://www.runivers.ru/granitsy-rossii/about/about_detailed/index.php\" target=\"_blank\">ПОДРОБНЕЕ .\n</P>\n`;\n","import LogoColorImg from './img/Runivers-Logo-color.svg';\nimport TransneftLogo1Img from './img/Transneft_logo1.png';\nimport GeolabImg from './img/geolab.png';\nimport NextgisImg from './img/nextgis.png';\n\nexport const aboutShortEn = `\n<div style=\"margin-top: 40px;\"></div>\n<div class=\"partner_logos\">\n<a href=\"https://www.runivers.ru\" target=\"_blank\"><img src=\"${LogoColorImg}\" /></a>\n<a href=\"https://www.transneft.ru\" target=\"_blank\"><img src=\"${TransneftLogo1Img}\" /></a>\n<a href=\"https://histgeo.ru/laboratory.html\" target=\"_blank\"><img src=\"${GeolabImg}\" /></a>\n<a href=\"https://nextgis.com\" target=\"_blank\"><img src=\"${NextgisImg}\" /></a>\n</div>\n<div style=\"margin-top: 40px;\"></div>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<h2>Russia’s Borders from 1462 through 2018’ Project</h2></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n\n<SPAN LANG=\"en-EN\"><a href=\"https://www.runivers.ru\" target=\"_blank\">Runivers</a>\n\npresents ‘Russia’s Borders from 1462 through 2018’ –\na project designed in collaboration with the\n<a href=\"https://histgeo.ru/laboratory.html\" target=\"_blank\">\nLaboratory of Historical Geomatics</a> at the Institute of World History\nof the Russian Academy of Sciences (RAS) and\n<a href=\"http://nextgis.com\" target=\"_blank\">NextGIS Ltd.</a>\n</SPAN></P>\n\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\nThis cartographic project contains geographical information on the political borders\nof the contemporary Russian Federation and its predecessor states.\nAn opportunity to select any year in the 1462 to 2018 time bracket is a crucial option of this map.\nTo choose the needed year, the users either click at the needed point on the timeline (at the bottom of the map)\nor launch its step-by-step automatic rewinding or else use the + or –\nicons to the right of the timeline, thus moving one year backwards or forwards.\n</SPAN></P>\n\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<A NAME=\"OLE_LINK210\"></A><A NAME=\"OLE_LINK209\"></A>\n<SPAN LANG=\"en-EN\">\nThe realization that the forms of a political status of lands are multiple and that,\non the other hand, this diversity should be reduced to a limited number of versions for\ndepiction on the map has prompted us to single out seven different statuses of the territory\nof today’s Russia and its predecessors.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0in\">\n<SPAN LANG=\"en-EN\">\n1) The mainland of the state.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0in\">\n<SPAN LANG=\"en-EN\">\n2) A territory under protectorate, vassal allegiance or in the sphere of influence.\n</SPAN></P>\n<P LANG=\"en-EN\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0in\">\n3) A leased territory.\n</P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0in\">\n<SPAN LANG=\"en-EN\">\n4) A territory in joint possession.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0in\">\n<SPAN LANG=\"en-EN\">\n5) A litigious territory.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<A NAME=\"OLE_LINK222\"></A><A NAME=\"OLE_LINK221\"></A>\n<SPAN LANG=\"en-EN\">\nChanges in the configuration of the border in relevant years are shown in separate polygons as: 6.\nthe newly acquired territories or, 7. lost territories.\nThese polygons have the tokens, the numbers on which correspond to positions in the list of\nterritorial changes found in the info bar.\nTerritorial changes occurred in different months of the year – sometimes in the first half of the year,\nand sometime in the second half, and that is why the polygons with statuses 6 and 7 sometimes stay on\nand get over to the year that followed a specified event.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\nThe differentiation is reflected in popup windows,\nwhich the users can bring up by clicking at any object inside the political borders.\nThe polygons are filled with four colors. One color shows the mainland of the state and the newly\nincorporated lands (statuses 1 and 6); the second color marks the lands that have a certain degree\nof dependence on the state (status 2); the third color brings out the leased and litigious areas or\nthe lands governed jointly with other countries (statuses 3 and 5).\nThe lost territories (status 7) are marked with the fourth color but owing to certain technology\npeculiarities of the current algorithm of geometrical arrangements formation some of the lost territories\nare not displayed on the map with the aid of separate polygons. A click at any polygon will call up\nthe information on the chronological range, in which a territorial entity existed, and on its size (in sq. km).\n</SPAN></P>\n\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\nPlaced in the center of each polygon is a token that helps the users find an appropriate\nlocation on a small-scale map. A click at the token will retrieve the data on the event\nthat resulted in the formation of the specific territorial entity.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\nThree button icons are available in the upper right-hand corner of the map.\nThe first one switches the contemporary basemap off, while two others make it\npossible to handle the presentation of two data units of the map.\nThe first unit shows the name, title/ official position and the years in office of the person\nwho ruled the territory in the year chosen by the user. It also contains a reference to a special page\nat the website that offers detailed information. The lower data unit provides information\non the territorial changes in the selected year, as well as on an approximate size of the lands\nthat were incorporated into the nation or, vice versa, were lost.\n</SPAN></P>\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\n‘The Borders of the Duchy of Muscovy/ Czardom of Russia/ Russian Empire/ USSR/\nRussian Federation from 1462 through 2018’ web GIS rests on the concept of a dynamic map.\nAs regards the technical implementation, this concept embodies an original solution developed at the\n<a href=\"https://histgeo.ru/laboratory.html\" target=\"_blank\">Laboratory of Historical Geomatics</a>\nof the RAS Institute of World History in cooperation with\n<a href=\"http://nextgis.com\" target=\"_blank\">NextGIS Ltd.</a>\n</SPAN></P>\n\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\nPractical applicability of this project for research purposes makes it stand out among other projects of this kind.\nThe dynamic maps displaying the past changes of state borders most typically have an educational\nfocus and historians do not have a chance to amend them after expert debates.\nConversely, the dynamic map released now is open for future amendments and is called upon\nto serve as an instrumental cartographic aid for the scholars of history who use GIS technologies\nto attain specified research objectives.\n\n\n<P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n<SPAN LANG=\"en-EN\">\nTechnical implementation  <a href=\"http://nextgis.com/blog/runivers/\" target=\"_blank\">description</a>.\n</SPAN></P>\n`;\n","import './Links.scss';\nimport './img/nextgis.png';\n\nimport Dialog from '@nextgis/dialog';\nimport pkg from '../../../package.json';\n\nimport { App } from '../../App';\nimport { Panel } from '../Panels/PanelControl';\nimport { Toggler } from './Toggler';\nimport { aboutShortRu } from './aboutRu';\nimport { aboutShortEn } from './aboutEn';\n\nimport type { IControl } from 'maplibre-gl';\nimport type { DialogAdapterOptions } from '@nextgis/dialog';\nimport type { SliderOptions } from '../SliderControl';\nimport type { Controls } from '../../controls/Controls';\n\nfunction getBaseLayerToggler(controls: Controls) {\n  const baseLayer = 'baselayer';\n  const baseLayerToggler = new Toggler({\n    className: 'baselayer__toggler',\n    title: 'Скрыть подложку',\n    titleOff: 'Показать подложку',\n    toggleAction: (status) => {\n      if (status) {\n        controls.app.webMap.showLayer(baseLayer);\n      } else {\n        controls.app.webMap.hideLayer(baseLayer);\n      }\n    },\n  });\n  return baseLayerToggler;\n}\n\nfunction openDialog(options: DialogAdapterOptions) {\n  const dialog = new Dialog(options);\n\n  const isSame =\n    options && options.template && dialog.options.template === options.template;\n  if (!isSame) {\n    dialog.updateContent(options.template);\n  }\n  dialog.show();\n  return dialog;\n}\n\ninterface SliderSettings {\n  name: keyof SliderOptions;\n  label: string;\n  type: 'number';\n}\n\nfunction getYearsToggler(controls: Controls) {\n  const yearsStatPanelControl = controls.yearsStatPanelControl;\n  if (yearsStatPanelControl) {\n    const yearsToggler = new Toggler({\n      className: 'years__toggler',\n      title: 'Скрыть панель изменения в территориальном составе',\n      titleOff: 'Показать панель изменения в территориальном составе',\n      toggleAction: (status) => {\n        if (status) {\n          yearsStatPanelControl._blocked = false;\n          yearsStatPanelControl.show();\n        } else {\n          yearsStatPanelControl.hide();\n          yearsStatPanelControl._blocked = true;\n        }\n      },\n    });\n    yearsStatPanelControl.emitter.on('toggle', (status) => {\n      yearsToggler.toggle(status);\n    });\n    return yearsToggler;\n  }\n}\n\nfunction getPeriodToggler(controls: Controls) {\n  const periodsPanelControl = controls.periodsPanelControl;\n  if (periodsPanelControl) {\n    const periodToggler = new Toggler({\n      className: 'period__toggler',\n      title: 'Скрыть панель правителей',\n      titleOff: 'Показать панель правителей',\n      toggleAction: (status) => {\n        if (status) {\n          periodsPanelControl.show();\n        } else {\n          periodsPanelControl.hide();\n        }\n      },\n    });\n\n    periodsPanelControl.emitter.on('toggle', (status) => {\n      periodToggler.toggle(status);\n    });\n    return periodToggler;\n  }\n}\n\nfunction getLegendToggler(controls: Controls) {\n  const legendPanel = controls.legendPanel;\n  if (legendPanel) {\n    const legendToggler = new Toggler({\n      className: 'legend__toggler',\n      title: 'Скрыть легенду',\n      titleOff: 'Показать легенду',\n      toggleAction: (status) => {\n        if (status) {\n          legendPanel.show();\n        } else {\n          legendPanel.hide();\n        }\n      },\n    });\n\n    legendPanel.emitter.on('toggle', (status) => {\n      legendToggler.toggle(status);\n    });\n    return legendToggler;\n  }\n}\n\nexport function getSwitcherPanelControl(controls: Controls): Panel {\n  const block = document.createElement('div');\n  block.className = 'switcher-panel-control';\n\n  const toggles: Array<Toggler | undefined> = [\n    getLegendToggler(controls),\n    getPeriodToggler(controls),\n    getYearsToggler(controls),\n    getBaseLayerToggler(controls),\n  ];\n\n  toggles.forEach((t) => t && block.appendChild(t.getContainer()));\n\n  const panel = new Panel({\n    addClass: 'panel-links',\n  });\n  panel.updateBody(block);\n  return panel;\n}\n\nexport function getSocialLinksPanel(): Panel {\n  const block = document.createElement('div');\n  block.innerHTML = `\n    <div class=\"social-links\">\n      <a href=\"http://twitter.com/runivers\" class=\"social__logo twitter\"></a>\n      <a href=\"http://www.facebook.com/Runiverse.ru\" class=\"social__logo facebook\"></a>\n      <a href=\"http://vk.com/public35690973\" class=\"social__logo vkontakte\"></a>\n    </div>\n  `;\n  // <a href=\"http://runivers.livejournal.com/\" class=\"social__logo livejournal\"></a>\n\n  const panel = new Panel({\n    addClass: 'panel-links',\n  });\n  panel.updateBody(block);\n  return panel;\n}\n\nfunction getAboutBlock(block: string) {\n  return `\n    <P LANG=\"en-GB\" CLASS=\"western\" ALIGN=JUSTIFY STYLE=\"margin-bottom: 0.17in\">\n      <SPAN LANG=\"ru-RU\">${block}</SPAN>\n    </P>`;\n}\n\nexport function openAboutDialog(app: App, language = 'ru'): void {\n  const attrs = app.webMap.getAttributions({\n    onlyVisible: false,\n    onlyBaselayer: true,\n  });\n  const templates: Record<string, string> = {\n    ru: aboutShortRu,\n    en: aboutShortEn,\n  };\n  let template = templates[language];\n  if (attrs.length) {\n    let str =\n      language === 'ru'\n        ? 'Использована картографическая подложка: '\n        : 'The basemap used: ';\n    attrs.forEach((x) => {\n      str += x;\n    });\n    template += getAboutBlock(str);\n  }\n  const html = document.createElement('div');\n  html.innerHTML = template;\n  const languageSwitcher = html.getElementsByClassName(\n    'switch-about-language-btn',\n  )[0] as HTMLAnchorElement;\n  if (languageSwitcher) {\n    languageSwitcher.onclick = () => {\n      Dialog.clean();\n      openAboutDialog(app, languageSwitcher.name);\n    };\n  }\n  openDialog({ template: html });\n}\n\nexport function getAboutProjectLink(app: App): HTMLElement {\n  const block = document.createElement('a');\n  block.className = 'about_icon';\n  block.setAttribute('href', '#');\n  block.innerHTML = `i`;\n  block.onclick = () => {\n    openAboutDialog(app, 'ru');\n  };\n\n  return block;\n}\n\nexport function openSettingsDialog(app: App): void {\n  const template = document.createElement('div');\n\n  // link to blog\n  const header = document.createElement('div');\n  header.className = 'settings-dialog__header';\n  header.innerHTML = `\n    <h2>Настройки</h2>\n  `;\n  template.appendChild(header);\n\n  // settings input\n  const s = app.slider;\n  const settings: SliderSettings[] = [\n    { name: 'animationDelay', label: 'Задержка анимации, мс', type: 'number' },\n    { name: 'step', label: 'Шаг изменения года', type: 'number' },\n    {\n      name: 'animationStep',\n      label: 'Шаг изменения года (анимация)',\n      type: 'number',\n    },\n  ];\n\n  settings.forEach((x) => {\n    const id = x.name + '-' + Math.round(Math.random() * 10000);\n    const inputBlock = document.createElement('label');\n    inputBlock.className = 'settings-dialog__input-block';\n    inputBlock.innerHTML = `<div class=\"settings-dialog__input-block--label\">${\n      x.label\n    }: </div>\n      <input class=\"${id}\" class=type=${x.type} value=${s.options[x.name]}>\n      </input>\n    `;\n    const input = inputBlock.getElementsByClassName(id)[0] as HTMLInputElement;\n    input.addEventListener('input', () => {\n      const value =\n        x.type === 'number' ? parseInt(input.value, 10) : input.value;\n      Object.defineProperty(s.options, x.name, { value, enumerable: true });\n    });\n\n    template.appendChild(inputBlock);\n  });\n\n  // editable legend\n  const legend =\n    app.controls.legendPanel &&\n    app.controls.legendPanel.createLegendBlock(true);\n  if (legend) {\n    template.appendChild(legend);\n  }\n\n  // link to blog\n  const readMore = document.createElement('div');\n  readMore.className = 'settings-dialog__read-more';\n  readMore.innerHTML = `\n    Описание технической реализации проекта доступно по\n    <a href=\"http://nextgis.ru/blog/runivers/\" target=\"_blank\">ссылке</a>.\n    <div>v.${pkg.version}</div>\n  `;\n  template.appendChild(readMore);\n\n  openDialog({ template });\n}\n\nexport function getAffiliatedLinks(app: App): HTMLElement {\n  const block = document.createElement('div');\n  block.innerHTML = `\n  <a href=\"https://www.runivers.ru\"\n    title=\"Электронная  энциклопедия и библиотека Руниверс\"\n    class=\"affiliated-logo runiver__logo__min\" target=\"_blank\"\n  ></a>\n  <a href=\"https://histgeo.ru/laboratory.html\"\n    class=\"affiliated-logo laboratory__logo__min\" target=\"_blank\"\n    title=\"Лаборатория исторической геоинформатики\"\n  ></a>\n  <a href=\"https://www.transneft.ru\"\n    class=\"affiliated-logo transneft__logo__min\" target=\"_blank\"\n    title=\"ПАО «Транснефть»\"\n  ></a>\n  <a href=\"https://nextgis.ru\"\n    class=\"affiliated-logo nextgis__logo__min\" target=\"_blank\"\n    title=\"Разработка ГИС и проекты\"\n  ></a>\n  <a href=\"#\" class=\"affiliated-logo settings__logo__min\" target=\"_blank\" title=\"Настройки\"></a>\n  `;\n\n  const settings = block.getElementsByClassName(\n    'settings__logo__min',\n  )[0] as HTMLElement;\n  if (settings) {\n    settings.onclick = (e) => {\n      e.preventDefault();\n      openSettingsDialog(app);\n    };\n  }\n  return block;\n}\n\nexport function getAffiliatedPanel(controls: Controls): Panel {\n  const block = getAffiliatedLinks(controls.app);\n\n  const panel = new Panel({\n    addClass: 'panel-links',\n  });\n  panel.updateBody(block);\n  return panel;\n}\n\nexport function getHomeBtnControl(control: Controls): Promise<IControl> {\n  const _control = control.app.webMap.createButtonControl({\n    addClass: 'maplibregl-ctrl-icon maplibregl-ctrl-home',\n    onClick: () =>\n      control.app.options.bounds &&\n      control.app.webMap.fitBounds(control.app.options.bounds),\n  });\n\n  return _control;\n}\n\nexport function getTimelineButton(): HTMLElement {\n  const link = document.createElement('a');\n  link.className = 'panel__toggler graph_logo';\n  link.setAttribute(\n    'href',\n    'https://www.runivers.ru/granitsy-rossii/charts/index.php',\n  );\n  link.setAttribute('title', 'График изменения территории России');\n  link.setAttribute('target', '_blank');\n  return link;\n}\n","import Color from 'color';\nimport { Panel, PanelOptions } from './PanelControl';\nimport './LegendPanelControl.css';\nimport { LegendColor, LegendColorItem } from '../../interfaces';\nexport interface LegendPanelOptions extends PanelOptions {\n  colors?: LegendColor;\n}\n\nconst OPTIONS: LegendPanelOptions = {\n  addClass: 'legend-panel',\n};\n\nexport class LegendPanelControl extends Panel {\n  constructor(public options: LegendPanelOptions) {\n    super({ ...OPTIONS, ...options });\n    this._createLegendBody();\n\n    this._addEventsListener();\n  }\n\n  createLegendBlock(interactive = false): HTMLElement {\n    const element = document.createElement('div');\n    element.className = 'panel-body__legend';\n    const colors = this.options.colors;\n    if (colors) {\n      Object.values(colors).forEach((x) => {\n        x.forEach((c) => {\n          element.appendChild(this._createLegendItem(c, interactive));\n        });\n      });\n    }\n\n    return element;\n  }\n\n  private _createLegendBody() {\n    const element = this.createLegendBlock();\n    const buttonBlock = document.createElement('div');\n    buttonBlock.className = 'panel-body__legend--button';\n    buttonBlock.innerHTML = `\n    <div><a\n      href=\"https://www.runivers.ru/granitsy-rossii/charts/index.php\"\n      target='_blank'\n      class=\"btn panel-button\">ГРАФИК ИЗМЕНЕНИЯ ТЕРРИТОРИИ\n    </a></div>\n    <div><a\n      href=\"https://runivers.ru/doc/rusland/zemli-i-knyazhestva/\"\n      target='_blank'\n      class=\"btn panel-button\">Схема земель и княжеств <div class=\"link-button subtitle\">средневековой Руси</div>\n    </a></div>\n    `;\n    element.appendChild(buttonBlock);\n    this.updateBody(element);\n    return element;\n  }\n\n  private _createLegendItem(c: LegendColorItem, interactive = false) {\n    const block = document.createElement('div');\n    block.className = 'panel-body__legend--block';\n\n    const [id, paint, text] = c;\n    const color = typeof paint === 'string' ? paint : paint.color;\n    const type = (typeof paint !== 'string' && paint.type) || 'fill';\n    if (interactive) {\n      this._createInteractiveBlock(block, id, color, text);\n    } else {\n      const _color = new Color(color);\n\n      const colorSymbol = document.createElement('div');\n      colorSymbol.className = 'panel-body__legend--color ' + type;\n      colorSymbol.style.backgroundColor = String(_color.fade(0.3));\n\n      colorSymbol.style.border = '2px solid ' + _color.darken(0.5);\n\n      block.appendChild(colorSymbol);\n\n      const nameBlock = document.createElement('div');\n      nameBlock.className = 'panel-body__legend--name';\n      nameBlock.innerHTML = `${text}`;\n      block.appendChild(nameBlock);\n    }\n    return block;\n  }\n\n  private _createInteractiveBlock(\n    block: HTMLElement,\n    id: number,\n    color: string,\n    text: string,\n  ) {\n    const colorInput = document.createElement('input');\n    colorInput.setAttribute('type', 'color');\n    colorInput.className = 'editable-legend__color-input';\n    colorInput.value = color;\n    block.appendChild(colorInput);\n    const getName = (value: string) => {\n      return ` - ${text} (${value})`;\n    };\n\n    const nameBlock = document.createElement('span');\n    nameBlock.className = 'panel-body__legend--name';\n    nameBlock.innerHTML = getName(color);\n    const allColors = this.options.colors;\n    colorInput.onchange = () => {\n      if (allColors) {\n        const colors: LegendColorItem[] = [];\n        Object.values(allColors).forEach((x) =>\n          x.forEach((y) => colors.push(y)),\n        );\n        const changedColor = colors.find((x) => x[0] === id);\n        if (changedColor) {\n          changedColor[1] = colorInput.value;\n          nameBlock.innerHTML = getName(colorInput.value);\n          this.emitter.emit('change', this.options.colors);\n        }\n      }\n    };\n\n    block.appendChild(nameBlock);\n  }\n\n  private _addEventsListener() {\n    this.emitter.on('change', () => {\n      this._createLegendBody();\n    });\n  }\n}\n","import './PanelControl.css';\nimport { WebMap } from '@nextgis/webmap';\nimport Dialog, { DialogAdapterOptions } from '@nextgis/dialog';\nimport { EventEmitter } from 'events';\n\nexport interface PanelOptions {\n  headerText?: string;\n  addClass?: string;\n  webMap?: WebMap;\n}\n\nexport class Panel {\n  emitter = new EventEmitter();\n\n  isHide = false;\n  _blocked = false;\n\n  protected webMap?: WebMap;\n  protected _header?: HTMLElement;\n  private _container?: HTMLElement;\n  private _body?: HTMLElement;\n  private _dialog!: Dialog;\n\n  constructor(protected options: PanelOptions = {}) {\n    this.webMap = this.options.webMap;\n    this._container = this._createContainer();\n  }\n\n  getContainer(): HTMLElement | undefined {\n    return this._container;\n  }\n\n  onAdd(map: WebMap): HTMLElement | undefined {\n    this.webMap = map;\n    return this._container;\n  }\n\n  onRemove(): void {\n    if (this._container) {\n      const parentNode = this._container.parentNode;\n      if (parentNode) {\n        parentNode.removeChild(this._container);\n      }\n    }\n  }\n\n  updateBody(content: HTMLElement | string): void {\n    this._cleanBody();\n    if (this._body) {\n      if (typeof content === 'string') {\n        this._body.innerHTML = content;\n      } else if (content instanceof HTMLElement) {\n        this._body.appendChild(content);\n      }\n    }\n  }\n\n  hide(): void {\n    this.isHide = true;\n    if (this._container) {\n      this._container.classList.add('panel-hide');\n    }\n    this.emitter.emit('toggle', false);\n  }\n\n  show(): void {\n    if (!this._blocked) {\n      this.isHide = false;\n      if (this._container) {\n        this._container.classList.remove('panel-hide');\n      }\n      this.emitter.emit('toggle', true);\n    }\n  }\n\n  block(): void {\n    this._blocked = true;\n  }\n\n  unBlock(): void {\n    this._blocked = false;\n  }\n\n  createControlButton(onclick: () => void, text = 'Подробнее'): HTMLElement {\n    const element = document.createElement('button');\n    element.className = 'btn panel-button';\n    element.innerHTML = text;\n    element.onclick = onclick;\n    return element;\n  }\n\n  createRefButton(url: string, text?: string): HTMLElement {\n    return this.createControlButton(() => window.open(url, '_blank'), text);\n  }\n\n  openDialog(options?: DialogAdapterOptions): void {\n    if (!this._dialog) {\n      this._dialog = new Dialog(options);\n    }\n    const template = options && options.template;\n    if (template) {\n      const isSame = this._dialog.options.template === template;\n      if (!isSame) {\n        this._dialog.updateContent(template);\n      }\n    }\n    this._dialog.show();\n  }\n\n  closeDialog(): void {\n    if (this._dialog) {\n      this._dialog.close();\n    }\n  }\n\n  private _cleanBody() {\n    if (this._body) {\n      this._body.innerHTML = '';\n    }\n  }\n\n  private _createContainer() {\n    const element = document.createElement('div');\n    element.className = 'maplibregl-ctrl panel';\n    if (this.options.addClass) {\n      this.options.addClass.split(' ').forEach((x) => element.classList.add(x));\n    }\n    if (this.options.headerText) {\n      // element.appendChild(this._createHeader());\n    }\n    element.appendChild(this._createBody());\n\n    return element;\n  }\n\n  private _createHeader() {\n    const element = document.createElement('div');\n    element.className = 'panel-header';\n    if (this.options.headerText) {\n      element.innerHTML = this.options.headerText;\n    }\n\n    this._header = element;\n    return element;\n  }\n\n  private _createBody() {\n    const element = document.createElement('div');\n    element.className = 'panel-body';\n\n    this._body = element;\n    return element;\n  }\n}\n","import { Panel, PanelOptions } from './PanelControl';\nimport './PeriodPanelControl.css';\nimport { formatArea } from '../../utils/utils';\nimport { AreaStat } from '../../interfaces';\n\n/**\n * Information about the ruler in the time interval\n */\nexport interface Period {\n  tech_number: number;\n  number: number;\n  name: string;\n  years_life: string;\n  years_from: number;\n  years_to?: number;\n  description?: string;\n  detail_link?: string;\n  img_link?: string;\n}\n\nconst OPTIONS: PanelOptions = {\n  headerText: 'Правители',\n  addClass: 'period-panel',\n};\n\nexport class PeriodPanelControl extends Panel {\n  private period?: Period;\n  private areaStat?: AreaStat;\n\n  constructor(options?: PanelOptions) {\n    super(Object.assign({}, OPTIONS, options));\n  }\n\n  hide(): void {\n    super.hide();\n    if (this.webMap) {\n      const container = this.webMap.getContainer();\n      if (container) {\n        container.classList.remove('period-panel');\n      }\n    }\n  }\n\n  show(): void {\n    super.show();\n    if (!this.isHide && this.webMap) {\n      const container = this.webMap.getContainer();\n      if (container) {\n        container.classList.add('period-panel');\n      }\n    }\n  }\n\n  updatePeriod(period: Period, areaStat?: AreaStat): void {\n    this.closeDialog();\n    if (period) {\n      const exist = this.period;\n      const currentArea = this.areaStat && this.areaStat.area;\n      const newArea = areaStat && areaStat.area;\n      if (exist !== period || currentArea !== newArea) {\n        this.updateBody(this._createPeriodBody(period, areaStat));\n        this.period = period;\n        this.areaStat = areaStat;\n      }\n    } else {\n      this.updateBody(\n        '<div class=\"panel-body__period empty\">В этом году изменений территории не было</div>',\n      );\n      this.period = undefined;\n    }\n  }\n\n  private _createPeriodBody(period: Period, areaStat?: AreaStat) {\n    const element = document.createElement('div');\n    element.className = 'panel-body__period';\n\n    // Gov name\n    const periodElement = document.createElement('div');\n\n    let imageHtml = '';\n    if (period.img_link) {\n      imageHtml = `<div\n        class=\"panel-body__period--image\" style=\"background-image: url('${period.img_link}');\">\n      </div>`;\n    }\n\n    periodElement.innerHTML = `\n      ${imageHtml ? imageHtml : ''}\n      <div class=\"panel-body__period--name\">${period.name}</div>\n      <div class=\"panel-body__period--period\">${period.years_from} – ${\n      period.years_to\n    } гг.</div>\n      <div class=\"panel-body__period--description\">${period.description}</div>\n      ${\n        areaStat\n          ? `\n      <div class=\"panel-body__period--description panel-body__period--area_wrap\">\n        Общая площадь: <span class=\"panel-body__period--area\">\n          ${formatArea(areaStat.area)}\n        </span>\n      </div>\n      `\n          : ''\n      }\n    `;\n    element.appendChild(periodElement);\n\n    const detailLink =\n      period.detail_link && this.createRefButton(period.detail_link);\n\n    if (detailLink) {\n      element.appendChild(detailLink);\n    }\n\n    return element;\n  }\n}\n","import { defined } from '@nextgis/utils';\nimport { Panel, PanelOptions } from './PanelControl';\nimport './YearsStatPanelControl.css';\nimport { formatArea } from '../../utils/utils';\nimport { AreaStat } from '../../interfaces';\n\n/**\n * @typedef {Object} YearStat - information about changes in territorial integrity\n * @prop {number} year\n * @prop {number} territories_gained\n * @prop {number} territories_lost\n * @prop {string} period\n */\nexport interface YearStat {\n  // precision: '0' | '1' | 'П' | 'Н';\n  // comment?: string;\n  // fid: number;\n  // ruler?: string;\n  // date_from: string;\n  // date_to?: string;\n  // reason?: string;\n  year: number;\n  description_short?: string;\n  description_long?: string;\n  numb?: number;\n  count?: number;\n}\n\nconst OPTIONS: PanelOptions = {\n  headerText: 'Изменения в территориальном составе',\n  addClass: 'stat-panel',\n};\n\nexport class YearsStatPanelControl extends Panel {\n  yearStat?: YearStat;\n  yearStats?: YearStat[];\n  areaStat?: AreaStat;\n\n  constructor(options?: PanelOptions) {\n    super({ ...OPTIONS, ...options });\n  }\n\n  hide(): void {\n    super.hide();\n    if (this.webMap) {\n      const container = this.webMap.getContainer();\n      if (container) {\n        container.classList.remove('years-panel');\n      }\n    }\n  }\n\n  show(): void {\n    super.show();\n    if (!this.isHide && this.webMap) {\n      const container = this.webMap.getContainer();\n      if (container) {\n        container.classList.add('years-panel');\n      }\n    }\n  }\n\n  updateYearStats(yearStats: YearStat[], areaStat?: AreaStat): void {\n    this.yearStats = yearStats;\n    this.areaStat = areaStat;\n    this.updateYearStat(this.yearStats[0]);\n  }\n\n  updateYearStat(yearStat: YearStat): void {\n    const exist = this.yearStat;\n    const container = this.getContainer();\n    if (container) {\n      container.classList.remove('gain');\n      container.classList.remove('lost');\n    }\n    if (yearStat) {\n      if (exist !== yearStat) {\n        // this.show();\n        this.yearStat = yearStat;\n        this.updateBody(this._createPeriodBody(yearStat));\n      }\n    } else {\n      // this.hide();\n      this.updateBody(\n        '<div class=\"panel-body__period empty\">В этом году изменений территории не было</div>',\n      );\n      this.yearStat = undefined;\n    }\n    this.emitter.emit('update', { yearStat: this.yearStat });\n  }\n\n  private _createPeriodBody(yearStat: YearStat) {\n    const element = document.createElement('div');\n    element.className = 'panel-body__yearstat';\n\n    const yearBlock = document.createElement('div');\n    yearBlock.className = 'panel-body__period--year';\n    yearBlock.innerHTML = `${yearStat.year} г.`;\n    element.appendChild(yearBlock);\n\n    if (this.areaStat) {\n      const gain = this.areaStat.plus;\n      if (gain) {\n        element.appendChild(this._createGainBlock(gain));\n      }\n      const lost = this.areaStat.minus;\n      const container = this.getContainer();\n      if (lost) {\n        element.appendChild(this._createGainBlock(lost, true));\n      }\n      if (container) {\n        container.classList.add(lost ? 'lost' : 'gain');\n      }\n    }\n\n    if (this.yearStats && this.yearStats.length > 1) {\n      element.appendChild(this._createStateSwitcher());\n    }\n\n    const descrBlock = this._createDescriptionBlock(yearStat);\n    if (descrBlock) {\n      element.appendChild(descrBlock);\n    }\n    const descrLong = yearStat.description_long;\n    if (descrLong) {\n      const template = document.createElement('div');\n      template.className = 'panel-body__period--description';\n      template.innerHTML = `${descrLong}`;\n\n      const buttonWrap = document.createElement('div');\n\n      buttonWrap.className = 'button-wrap';\n      buttonWrap.appendChild(\n        this.createControlButton(() => this.openDialog({ template })),\n      );\n\n      element.appendChild(buttonWrap);\n    }\n\n    return element;\n  }\n\n  private _createStateSwitcher(): HTMLElement {\n    const sliderBlock = document.createElement('div');\n    sliderBlock.className = 'panel-body__period--slider';\n    const yearStats = this.yearStats;\n    const yearStat = this.yearStat;\n\n    if (yearStat && yearStats) {\n      const numb = yearStat.numb;\n      const count = defined(yearStat.count) ? yearStat.count : yearStats.length;\n      if (count && numb && count > 1 && count >= numb) {\n        const index = yearStats.indexOf(yearStat);\n        const isFirst = index === 0;\n        const length = yearStats.length;\n        const isLast = index === length - 1;\n\n        const createDirectionFlow = (\n          previous?: boolean,\n          isActive?: boolean,\n        ) => {\n          const flow = document.createElement('a');\n          flow.setAttribute('href', '#');\n          // flow.className = '' +\n          //   (previous ? 'back' : 'forward') +\n          //   (isActive ? '' : ' hiden');\n          flow.className =\n            (previous ? `panel_slider prev` : `panel_slider next`) +\n            (isActive ? '' : ' hidden');\n          if (isActive) {\n            flow.onclick = (e) => {\n              e.preventDefault();\n              const directStat = yearStats[previous ? index - 1 : index + 1];\n              this.updateYearStat(directStat);\n            };\n          }\n          return flow;\n        };\n\n        sliderBlock.appendChild(createDirectionFlow(true, !isFirst));\n\n        const flowCounter = document.createElement('div');\n        flowCounter.className = 'panel_slider-counter';\n\n        flowCounter.innerHTML = `${numb} из ${count}`;\n        sliderBlock.appendChild(flowCounter);\n        sliderBlock.appendChild(createDirectionFlow(false, !isLast));\n      }\n    }\n    return sliderBlock;\n  }\n\n  private _createDescriptionBlock(yearStat: YearStat): HTMLElement | undefined {\n    const element = document.createElement('div');\n    if (yearStat.description_short) {\n      element.innerHTML = `<div class=\"panel-body__period--description\">${yearStat.description_short}</div>`;\n      return element;\n    }\n  }\n\n  private _createGainBlock(count: number, isLost?: boolean) {\n    const element = document.createElement('div');\n    element.className =\n      'panel-body__yearstat--gain ' + (isLost ? 'lost' : 'gained');\n    element.innerHTML = (isLost ? '-' : '+') + formatArea(count);\n    return element;\n  }\n}\n"],"names":["TimeLayersGroup","constructor","webMap","options","this","name","_visible","visible","order","reserveOrder","undefined","opacity","_isWaitDataLoadedGroup","mapAdapter","emitter","on","data","_onData","hide","layersKeys","Object","keys","_timeLayers","x","_hideLayer","show","currentLayerId","_showLayer","updateLayer","layerId","beforeLayerId","switchLayer","updateLayersColor","map","getFillColor","fillColorDarken","darken","fillColor","l","_layersLoaded","indexOf","setPaintProperty","pushDataLoadEvent","event","_onDataLoadEvents","push","fitToFilter","filter","timeLayer","source","features","startsWith","featureCollection","getSource","_data","filterIdField","ids","concat","properties","sourceLayer","id","querySourceFeatures","length","_fitToFeatures","showOnlyCurrentLayer","hideNotCurrentLayers","makeOpacity","clean","_removePopup","_cleanDataLoadEvents","_removeLayerListeners","fromId","toId","Promise","resolve","reject","then","id_","_addLayerListeners","_setLayerOpacity","_onSourceIsLoaded","catch","er","hideLayer","getTimeLayer","forEachTimeLayer","fun","selectLayerFeature","feature","adapterId","prop","fid","adapter","_getWebMapLayer","select","Number","fids","fit","split","layers","mapLayers","mapLayer","layer","setFilter","_filter","_updateFilter","_getWebMapLayerId","String","getLayer","dataLoaded","value","dataLayerId","setLayerOpacity","showLayer","_popup","remove","_isCurrentDataLayer","currentLayers","some","y","_getLayerIdFromSource","target","t","find","url","loadedYet","isCurrentLayer","isHistoryLayer","_isHistoryLayer","_onLayerClick","e","point","queryRenderedFeatures","width","height","createPopupContent","html","Popup","setLngLat","lngLat","setDOMContent","addTo","selectOnLayerClick","memEvents","_onLayerClickMem","ev","memEvent","off","_forEachDataLayer","layerClickBind","getCanvas","style","cursor","click","mouseenter","mouseleave","isBaseLayer","_isAllDataLayerLoaded","every","forEach","manualOpacity","_executeDataLoadEvents","fry","addLayers","_toggleLayer","status","removeLayer","toggle","toggleLayer","setUrl","baseUrl","resourceId","oldNgwMvtApi","newNgwMvtUrl","_addLayer","setTimeout","opt","bounds","LngLatBounds","types","extendCoords","coords","extend","c","geometry","coordinates","type","onlyPoint","fitBounds","padding","maxZoom","pointFitMaxZoom","polygonFitMaxZoom","propertiesFilter","EVENTS_IDS","TimeMap","EventEmitter","getTimeGroup","groupName","_timeLayersGroups","getTimeGroupByAdapterId","_getTimeGroupBy","getTimeGroupByLayerId","includes","getTimeGroups","addTimeGroup","timeLayersGroup","updateByYear","year","previous","layersId","_getLayerIdsByYear","updateLayers","onLayerUpdate","group","layerIdRecord","updateLayersPromise","getUpdateLayersPromise","finishLoading","resetLoading","onReset","_loadLayerPromises","emit","groups","layerIdRecordList","promises","key","exist","promise","all","_onGroupsLoadEvents","_event","unselect","exclude","selected","buildTimeMap","_groupsConfig","_processGroupsMeta","_addTimeLayersGroups","currentYear","_minYear","values","layersMeta","sort","a","b","from","config","statusLayer","getStatusLayer","callback","nextLayers","_getLayersByYear","_getNextLayers","nextYear","next","finish","onStepReady","entries","timeGroup","newId","_layerMetaToIdRecord","_maxYear","layerGroup","f","d","to","filteredLayers","metaRecord","layersMetaInYear","layerMeta","nextLayer","index","slice","reverse","layersGroup","groupsMeta","items","resource","display_name","_match","match","fromYear","toYear","App","transition","duration","delay","glyphs","location","origin","pathname","urlParams","cities","CitiesLayer","_markers","MarkerLayer","urlYear","get","parseInt","updateDataByYear","debounce","_updateDataByYear","createWebMap","_buildApp","WebMap","MapAdapter","starterKits","QmsKit","onLoad","timeMap","_getStatusLayer","once","_setSelectedLayerFromUrl","addBaseLayer","getTimeStop","stop","timeStops","pointId","_getPointIdByYear","updatePoint","areaStat","_findAreaStatByYear","_updatePeriodBlockByYear","_updateYearStatBlockByYear","set","getLayers","slider","_createSlider","_createHeader","_createAffiliatedLogos","controls","Controls","updateControls","onMapLoad","_addEventsListeners","getPoints","points","setPoints","StatusLayer","statusLayers","SliderControl","min","max","step","animationStep","animationDelay","stepReady","_stepReady","container","getContainer","appendChild","onAdd","header","document","createElement","className","headerText","innerHTML","getAboutProjectLink","mapContainer","logos","getAffiliatedLinks","period","_findPeriodByYear","periodsPanelControl","updatePeriod","periods","finded","years_from","years_to","yearsStatPanelControl","yearStat","_findYearStatsByYear","updateYearStats","yearsStat","updateActiveMarker","TimeMapLoadingControl","__onLoadingStart","_onLoadingStart","__onLoadingStop","_onLoadingStop","_container","onRemove","parent","parentNode","removeChild","Toggler","_status","_createContainer","_updateContainer","block","classList","add","toggleAction","addEventListener","title","titleOff","aboutShortRu","LogoColorImg","TransneftLogo1Img","GeolabImg","NextgisImg","aboutShortEn","getBaseLayerToggler","baseLayer","app","openDialog","dialog","Dialog","template","updateContent","getYearsToggler","yearsToggler","_blocked","getPeriodToggler","periodToggler","getLegendToggler","legendPanel","legendToggler","getSwitcherPanelControl","panel","Panel","addClass","updateBody","getSocialLinksPanel","getAboutBlock","openAboutDialog","language","attrs","getAttributions","onlyVisible","onlyBaselayer","templates","ru","en","str","languageSwitcher","getElementsByClassName","onclick","setAttribute","settings","preventDefault","s","label","Math","round","random","inputBlock","input","defineProperty","enumerable","legend","createLegendBlock","readMore","pkg","openSettingsDialog","getHomeBtnControl","control","createButtonControl","onClick","OPTIONS","LegendPanelControl","super","_createLegendBody","_addEventsListener","interactive","element","colors","_createLegendItem","buttonBlock","paint","text","color","_createInteractiveBlock","_color","Color","colorSymbol","backgroundColor","fade","border","nameBlock","colorInput","getName","allColors","onchange","changedColor","content","_cleanBody","_body","HTMLElement","isHide","unBlock","createControlButton","createRefButton","window","open","_dialog","closeDialog","close","_createBody","_header","PeriodPanelControl","assign","currentArea","area","newArea","_createPeriodBody","periodElement","imageHtml","img_link","description","formatArea","detailLink","detail_link","YearsStatPanelControl","yearStats","updateYearStat","yearBlock","gain","plus","_createGainBlock","lost","minus","_createStateSwitcher","descrBlock","_createDescriptionBlock","descrLong","description_long","buttonWrap","sliderBlock","numb","count","defined","isFirst","isLast","createDirectionFlow","isActive","flow","directStat","flowCounter","description_short","isLost"],"sourceRoot":""}