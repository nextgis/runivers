{"version":3,"file":"main-0a037d97f311aab.js","mappings":"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","sources":["webpack://russia-history/./src/layers/CitiesLayer.ts","webpack://russia-history/./src/layers/BaseLayer.ts","webpack://russia-history/./src/layers/MarkerLayer.ts","webpack://russia-history/./src/main.ts","webpack://russia-history/./src/services/GetLayersService.ts","webpack://russia-history/./src/services/NgwConnectorService.ts","webpack://russia-history/./src/services/GetPointsService.ts","webpack://russia-history/./src/services/UrlParams.ts","webpack://russia-history/./src/utils/utils.ts"],"sourcesContent":["import CityImg from '../img/city.png';\n\nimport { EventEmitter } from 'events';\nimport { Events } from '@nextgis/utils';\n\nimport { App } from '../App';\n\nimport { TimeLayer } from '../TimeMap/TimeGroup';\nimport { BaseLayer } from './BaseLayer';\n\nimport type { Map } from 'maplibre-gl';\nimport type { TimeLayersGroupOptions } from '../TimeMap/TimeGroup';\n\nexport class CitiesLayer extends BaseLayer {\n  oldNgwMvtApi = true;\n  emitter = new EventEmitter();\n  private events: Events;\n\n  constructor(protected app: App, options: Partial<TimeLayersGroupOptions>) {\n    super(app, options);\n    this.events = new Events(this.emitter);\n    this.app.webMap.onLoad().then(() => this._registerMapboxImages());\n  }\n\n  addLayers(url: string, id: string): Promise<TimeLayer>[] {\n    return this._createTimeLayers(url, id);\n  }\n\n  private _registerMapboxImages() {\n    const map: Map | undefined = this.app.webMap.mapAdapter.map;\n    if (map) {\n      map.loadImage(CityImg, (er, image) => {\n        if (image) {\n          map.addImage('city', image);\n          this.emitter.emit('load-images');\n        }\n      });\n    }\n  }\n\n  private _createTimeLayers(url: string, id: string): Promise<TimeLayer>[] {\n    // const sourceLayer = 'ngw:' + id;\n\n    const sourceLayer = id;\n    const label = this.events.onLoad('load-images').then(() => {\n      const layer = this.app.webMap.addLayer('MVT', {\n        url,\n        id,\n        order: this.order,\n        // name: id,\n        paint: {\n          'text-color': 'rgba(255, 255, 255, 1)',\n          'text-halo-color': 'rgba(49, 67, 90, .9)',\n          'text-halo-width': 1,\n        },\n        layout: {\n          'icon-image': 'city',\n          'icon-allow-overlap': true,\n          'icon-optional': true,\n          'text-field': ['to-string', ['get', 'toponym']],\n          // 'text-field': ['format', '123'],\n          'text-anchor': 'top',\n          'text-size': 10,\n          'text-font': ['Open Sans Bold'],\n\n          'text-variable-anchor': ['top'],\n          'text-radial-offset': 0.95,\n          'text-line-height': 1.1,\n          'text-letter-spacing': 0.06,\n          'text-padding': 0,\n          'text-justify': 'auto',\n        },\n        nativeOptions: { type: 'symbol' },\n        nativePaint: true,\n        type: 'point',\n        sourceLayer,\n      });\n      return layer.then((x) => {\n        return x;\n      });\n    }) as Promise<TimeLayer>;\n\n    return [\n      // layer,\n      label,\n    ];\n  }\n}\n","import {\n  TimeLayersGroupOptions,\n  TimeLayer,\n  TimeLayersGroup,\n} from '../TimeMap/TimeGroup';\n\nimport { App } from '../App';\n\nexport abstract class BaseLayer implements TimeLayersGroupOptions {\n  name!: string;\n  baseUrl!: string;\n  manualOpacity?: boolean;\n  filterIdField?: string;\n  order?: number;\n  opacity = 1;\n  simplification = 8;\n  selectOnLayerClick = false;\n  oldNgwMvtApi = false;\n\n  constructor(protected app: App, options: Partial<TimeLayersGroupOptions>) {\n    Object.assign(this, options);\n  }\n\n  get groupLayer(): TimeLayersGroup | false {\n    return this.app.timeMap && this.app.timeMap.getTimeGroup(this.name);\n  }\n\n  abstract addLayers(url: string, id: string): Promise<TimeLayer>[];\n}\n","import proj4 from 'proj4';\nimport { Feature, MultiPoint, Point } from 'geojson';\nimport { Map, Marker } from 'maplibre-gl';\nimport { arrayUnique } from '@nextgis/utils';\n\nimport { App } from '../App';\nimport {\n  AppMarkerMem,\n  PointProperties,\n  PointMeta,\n  HistoryLayerResource,\n} from '../interfaces';\nimport { getPointGeojson } from '../services/GetPointsService';\n\nexport class MarkerLayer {\n  name!: string;\n  baseUrl!: string;\n  manualOpacity?: boolean;\n  filterIdField?: string;\n  opacity = 1;\n  simplification = 8;\n\n  private currentPointId?: string;\n  private _markers: AppMarkerMem[] = [];\n  private _pointsConfig: PointMeta[] = [];\n\n  constructor(protected app: App) {}\n\n  setPoints(points: HistoryLayerResource[]): void {\n    this._pointsConfig = this._processPointsMeta(points);\n    const pointId = this._getPointIdByYear(this.app.timeMap.currentYear);\n    if (pointId) {\n      this.updatePoint(pointId);\n    }\n  }\n\n  remove(): void {\n    this._markers.forEach((x) => {\n      x.marker.remove();\n    });\n    this._markers = [];\n  }\n\n  updatePoint(pointId?: string): void {\n    if (pointId !== this.currentPointId) {\n      if (this.currentPointId) {\n        this.remove();\n      }\n      this.currentPointId = pointId;\n      if (pointId) {\n        this._addPoint(pointId);\n      }\n    }\n  }\n\n  updateActiveMarker(yearsStat: { year: number; numb: number }): void {\n    if (yearsStat) {\n      this._markers.forEach((x) => {\n        if (\n          x.properties.year === yearsStat.year &&\n          x.properties.numb === yearsStat.numb\n        ) {\n          x.element.classList.add('active');\n        } else {\n          x.element.classList.remove('active');\n        }\n      });\n    }\n  }\n\n  _getPointIdByYear(year: number): string | undefined {\n    const point = this._getPointByYear(year);\n    if (point) {\n      return point && String(point.id);\n    }\n  }\n\n  private _addPoint(id: string) {\n    getPointGeojson(id).then((data) => {\n      const _many =\n        data.features.length > 1 &&\n        arrayUnique(data.features.map((x) => x.properties.numb));\n      const many = _many && _many.length > 1;\n      data.features.forEach(\n        (marker: Feature<Point | MultiPoint, PointProperties>, i) => {\n          const type = marker && marker.geometry && marker.geometry.type;\n          if (type === 'MultiPoint') {\n            const coordinates = marker.geometry.coordinates as [\n              number,\n              number,\n            ][];\n            coordinates.forEach((x) => {\n              this._addMarkerToMap(x, marker.properties, many);\n            });\n          } else if (type === 'Point') {\n            this._addMarkerToMap(\n              marker.geometry.coordinates as [number, number],\n              marker.properties,\n              many,\n            );\n          }\n        },\n      );\n    });\n  }\n\n  // TODO: Mapboxgl specific method\n  private _addMarkerToMap(\n    coordinates: [number, number],\n    properties: PointProperties,\n    many: boolean,\n  ) {\n    const map: Map | undefined = this.app.webMap.mapAdapter.map;\n    if (map) {\n      // create a DOM element for the marker\n      const element = document.createElement('div');\n      let isActive;\n      if (this.app.controls.yearsStatPanelControl) {\n        const yearStat = this.app.controls.yearsStatPanelControl.yearStat;\n        isActive =\n          yearStat &&\n          yearStat.year === properties.year &&\n          yearStat.numb === properties.numb;\n      }\n\n      element.className = 'map-marker' + (isActive ? ' active' : ''); // use class `aсtive` for selected\n\n      const elInner = document.createElement('div');\n      elInner.className = 'map-marker--inner';\n      elInner.innerHTML = many\n        ? `<div class=\"map-marker__label\">${properties.numb}</div>`\n        : '';\n\n      element.appendChild(elInner);\n\n      const coordEPSG4326 = proj4('EPSG:3857').inverse(coordinates);\n      // add marker to map\n      const marker = new Marker(element);\n      const markerMem = { marker, element, properties };\n      this._markers.push(markerMem);\n      marker.setLngLat(coordEPSG4326);\n\n      marker.addTo(map);\n\n      element.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        this._setMarkerActive(markerMem, properties);\n      });\n    }\n  }\n\n  private _setMarkerActive(\n    markerMem: AppMarkerMem,\n    properties: PointProperties,\n  ) {\n    const yearControl = this.app.controls.yearsStatPanelControl;\n    if (yearControl && yearControl.yearStats) {\n      const yearStat = yearControl.yearStats.find((x) => {\n        return x.year === properties.year && x.numb === properties.numb;\n      });\n      if (yearStat) {\n        yearControl.updateYearStat(yearStat);\n        yearControl.unBlock();\n        yearControl.show();\n      }\n    }\n  }\n\n  private _getPointByYear(year: number): PointMeta | undefined {\n    return this._pointsConfig.find((x) => x.year === year);\n  }\n\n  private _processPointsMeta(pointsMeta: HistoryLayerResource[]): PointMeta[] {\n    return pointsMeta.map(({ resource }) => {\n      const name = resource.display_name;\n      // const [year, month, day] = name.match('(\\\\d{4})-(\\\\d{2})-(\\\\d{2})*$').slice(1).map((x) => Number(x));\n      // return { name, year, month, day, id: resource.id };\n      const _match = name.match('(\\\\d{4})*$') as string[];\n      const [year] = _match.slice(1).map((x) => Number(x));\n      return { name, year: year as number, id: resource.id };\n    });\n  }\n}\n","// import 'reset-css';\nimport 'maplibre-gl/dist/maplibre-gl.css';\n// polyfills\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport { defined } from '@nextgis/utils';\nimport { App } from './App';\nimport config from '../config.json';\nimport pkg from '../package.json';\n// @ts-ignore\nimport periods from './data/periods.csv';\n// @ts-ignore\nimport yearsStat from './data/years_stat.csv';\n// @ts-ignore\nimport areaStat from './data/area_stat.csv';\n// @ts-ignore\nimport principalities01 from './data/principalities_01.csv';\n// @ts-ignore\nimport principalities02 from './data/principalities_02.csv';\n\nimport './css/style.css';\nimport { YearStat } from './components/Panels/YearsStatPanelControl';\n\nfunction prepareYearStat(): YearStat[] {\n  const cacheByYear: { [year: string]: YearStat[] } = {};\n  (yearsStat as YearStat[]).forEach((s) => {\n    cacheByYear[s.year] = cacheByYear[s.year] || [];\n    cacheByYear[s.year].push(s);\n  });\n  for (const s in cacheByYear) {\n    const stat = cacheByYear[s];\n    if (stat.length > 1) {\n      stat.forEach((x, i) => {\n        if (!defined(x.count)) {\n          x.numb = i + 1;\n        }\n      });\n    }\n  }\n  return yearsStat;\n}\n\nconst app = new App({\n  baseUrl: config.baseUrl,\n  target: 'map',\n  fromYear: 850,\n  timeStops: [{ toYear: 1462, name: 'principalities' }],\n  currentYear: 1462,\n  animationDelay: 200,\n  animationStep: 1,\n  bounds: [2, 27, 203, 82],\n  minZoom: 3,\n  periods,\n  yearsStat: prepareYearStat(),\n  areaStat,\n  principalities01,\n  principalities02,\n  version: pkg.version,\n  // @ts-ignore\n  lineColor: config.lineColor,\n  // @ts-ignore\n  lineColorLegend: config.lineColorLegend,\n  // statusAliases: config.statusAliases,\n});\n\n// remove first and last slider pips\napp.emitter.on('build', () => {\n  const pips = document.getElementsByClassName('noUi-marker-large');\n  if (pips.length) {\n    const firstLast = [pips[0], pips[pips.length - 1]] as HTMLElement[];\n    firstLast.forEach((x) => {\n      x.style.display = 'none';\n    });\n  }\n});\n\n// for testing and debug\n// @ts-ignore\nwindow.app = app;\n// @ts-ignore\nwindow.version = pkg.version;\n","import layers from '../data/layers.json';\nimport { LayersGroup } from '../interfaces';\n\nexport function getLayers(callback: (layers: LayersGroup[]) => void): void {\n  if (layers) {\n    setTimeout(() => {\n      callback(layers as LayersGroup[]);\n    });\n  }\n}\n","import NgwConnector from '@nextgis/ngw-connector';\n// @ts-ignore\nimport config from '../../config.json';\n\nconst ngwUrl = config.baseUrl;\n\nconst connector = new NgwConnector({\n  baseUrl: ngwUrl,\n});\n\nexport { connector };\n","import { ResourceItem } from '@nextgis/ngw-connector';\nimport CancelablePromise from '@nextgis/cancelable-promise';\nimport { connector } from './NgwConnectorService';\nimport config from '../../config.json';\nimport { FeatureCollection, MultiPoint } from 'geojson';\nimport { PointProperties } from 'src/interfaces';\n\nexport function getPoints(): CancelablePromise<ResourceItem[]> {\n  // if (points) {\n  // setTimeout(function () {callback(points)});\n  // } else {\n  return connector.makeQuery(\n    '/api/resource/?parent={id}',\n    {\n      id: config.pointsGroupId,\n    },\n    {},\n  );\n  // }\n}\n\nexport function getPointGeojson(\n  id: string,\n): CancelablePromise<FeatureCollection<MultiPoint, PointProperties>> {\n  return connector.makeQuery(\n    '/api/resource/{id}/geojson',\n    {\n      id,\n    },\n    {},\n  );\n}\n","import UrlParams from '@nextgis/url-runtime-params';\n\nexport const urlParams = new UrlParams();\n","import { numberWithSpaces, Clipboard } from '@nextgis/utils';\n\nexport function formatArea(area: number): string {\n  return `${numberWithSpaces(Math.round(area))} км²`;\n}\n\nexport function copyText(text: string): void {\n  Clipboard.copy(text);\n}\n"],"names":["CitiesLayer","constructor","app","options","Object","assign","this","groupLayer","timeMap","getTimeGroup","name","super","EventEmitter","events","Events","emitter","webMap","onLoad","then","_registerMapboxImages","addLayers","url","id","_createTimeLayers","map","mapAdapter","loadImage","CityImg","er","image","addImage","emit","sourceLayer","addLayer","order","paint","layout","nativeOptions","type","nativePaint","x","MarkerLayer","setPoints","points","_pointsConfig","_processPointsMeta","pointId","_getPointIdByYear","currentYear","updatePoint","remove","_markers","forEach","marker","currentPointId","_addPoint","updateActiveMarker","yearsStat","properties","year","numb","element","classList","add","point","_getPointByYear","String","getPointGeojson","data","_many","features","length","arrayUnique","many","i","geometry","coordinates","_addMarkerToMap","document","createElement","isActive","controls","yearsStatPanelControl","yearStat","className","elInner","innerHTML","appendChild","coordEPSG4326","proj4","inverse","Marker","markerMem","push","setLngLat","addTo","addEventListener","e","preventDefault","stopPropagation","_setMarkerActive","yearControl","yearStats","find","updateYearStat","unBlock","show","pointsMeta","resource","display_name","_match","match","slice","Number","App","baseUrl","config","target","fromYear","timeStops","toYear","animationDelay","animationStep","bounds","minZoom","periods","cacheByYear","s","stat","defined","count","prepareYearStat","areaStat","principalities01","principalities02","version","pkg","lineColor","lineColorLegend","on","pips","getElementsByClassName","style","display","window","getLayers","callback","layers","setTimeout","ngwUrl","connector","NgwConnector","getPoints","makeQuery","urlParams","UrlParams","formatArea","area","numberWithSpaces","Math","round"],"sourceRoot":""}